{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sandeep Suman","title":"Home"},{"location":"teaching/","text":"Teaching \u00b6 1. Current Courses \u00b6 Linear Algebra in Semester I Complex Analysis in Semester II Operation Research in Semester III Programming in C in Semester IV 2. Online Courses \u00b6 Online videos can be found on this YouTube Channel . Linear Algebra System of Linear Equations Matrix of Linear Transformation 3. Programming Related Courses \u00b6 Ten Days Workshop on Python 3 for Students Faculty Develpment Programme on Python 3 4. Past Courses \u00b6 Abstract Algebra in semester I Analytical Mechanics in Semester III PDE in semester IV","title":"Teaching"},{"location":"teaching/#teaching","text":"","title":"Teaching"},{"location":"teaching/#1-current-courses","text":"Linear Algebra in Semester I Complex Analysis in Semester II Operation Research in Semester III Programming in C in Semester IV","title":"1. Current Courses"},{"location":"teaching/#2-online-courses","text":"Online videos can be found on this YouTube Channel . Linear Algebra System of Linear Equations Matrix of Linear Transformation","title":"2. Online Courses"},{"location":"teaching/#3-programming-related-courses","text":"Ten Days Workshop on Python 3 for Students Faculty Develpment Programme on Python 3","title":"3. Programming Related Courses"},{"location":"teaching/#4-past-courses","text":"Abstract Algebra in semester I Analytical Mechanics in Semester III PDE in semester IV","title":"4. Past Courses"},{"location":"complex-analysis/assignments/","text":"Assignments \u00b6 As a part of continuous assessment you have to submit the assignment S. No. Donwload Link 1 Download 2 Download 2 Download","title":"Assignments"},{"location":"complex-analysis/assignments/#assignments","text":"As a part of continuous assessment you have to submit the assignment S. No. Donwload Link 1 Download 2 Download 2 Download","title":"Assignments"},{"location":"complex-analysis/cauchy-integral-formula/","text":"Cauchy integral formula \u00b6 Theorem: Let \\(\\Gamma\\) be a simple closed positively oriented contour. If \\(f\\) is analytic in some simply connected domain \\(D\\) contain \\(\\Gamma\\) , and \\(z_0\\) is any point inside \\(\\Gamma\\) , then $$f(z_0)= \\frac{ 1 }{2\\pi i }\\int _\\Gamma \\frac{ f(z) }{ z-z_0 }dz $$ Proof: For sufficiently small \\(r>0\\) , \\(\\gamma :\\vert z-z_0 \\vert =r,\\) positively oriented lies inside \\(\\Gamma,\\) then by deformation theorem, we have \\[\\int _\\Gamma \\frac{ f(z) }{ z-z_0 }=\\int_\\gamma \\frac{ f(z) }{ z-z_0 }dz\\] Now, \\[\\begin{align} \\int _\\gamma \\frac{ f(z) }{ z-z_0 } dz &=\\int _\\gamma \\frac{f(z)-f(z_0) + f(z_0)}{ z-z_0 } dz \\\\ &=\\int _\\gamma \\frac{ f(z) }{ z-z_0 }dz+ \\int_\\gamma \\frac{f(z)-f(z_0) }{ z-z_0 } dz \\\\ &= f(z_0) \\cdot 2\\pi i + \\int _\\gamma \\frac{ f(z)-f(z_0) }{ z-z_0 }dz \\end{align}\\] In order to find the second integral, consider the following expression, \\[\\left \\vert \\frac{ f(z)-f(z_0 ) }{ z-z_0 } \\right \\vert = \\frac{ \\vert f(z)-f(z_0 )\\vert}{ r }\\leq \\frac{ M_r }{ r }\\] Using the above inequality, the integral will be \\[\\begin{align} \\left \\vert \\int_\\gamma \\frac{ f(z)-f(z_0 ) }{ z-z_0 } \\right \\vert &\\leq \\frac{ M_r }{ r } \\int_\\gamma \\vert dz \\vert \\\\ &= \\frac{ M_r }{ r } \\ell(\\gamma) \\\\ &= \\frac{ M_r }{ \\cancel{r} }\\cdot 2\\pi \\cancel{r} \\\\ &= 2\\pi \\cdot M_r \\end{align}\\] But \\(f\\) is continuous at \\(z_0\\) , hence taking the limit \\(r\\to 0\\) , we get \\[\\lim_{r \\to 0} \\vert f(z) - f(z_0) \\vert = \\lim_{r \\to 0} M_r = 0,\\] By deformation we can make this \\(r\\) arbitralily small, hence taking the limit \\(r\\to 0\\) , we have \\[\\require{cancel} \\begin{align} \\lim_{r\\to 0}\\left \\vert \\int_\\gamma \\frac{ f(z)-f(z_0 ) }{ z-z_0 } \\right \\vert &\\leq \\lim_{r\\to 0} 2\\pi M_r = 0 \\end{align} \\] Hence the given integral will be, \\[ \\begin{align} \\int _\\Gamma \\frac{ f(z) }{ z-z_0 } dz &= f(z_0) \\cdot 2\\pi i \\\\ f(z_0) &= \\frac{ 1 }{ 2\\pi i } \\int _\\Gamma \\frac{ f(z) }{ z-z_0 } dz \\end{align} \\] Credits: Pinku Kumar","title":"Cauchy Integral Formula"},{"location":"complex-analysis/cauchy-integral-formula/#cauchy-integral-formula","text":"Theorem: Let \\(\\Gamma\\) be a simple closed positively oriented contour. If \\(f\\) is analytic in some simply connected domain \\(D\\) contain \\(\\Gamma\\) , and \\(z_0\\) is any point inside \\(\\Gamma\\) , then $$f(z_0)= \\frac{ 1 }{2\\pi i }\\int _\\Gamma \\frac{ f(z) }{ z-z_0 }dz $$ Proof: For sufficiently small \\(r>0\\) , \\(\\gamma :\\vert z-z_0 \\vert =r,\\) positively oriented lies inside \\(\\Gamma,\\) then by deformation theorem, we have \\[\\int _\\Gamma \\frac{ f(z) }{ z-z_0 }=\\int_\\gamma \\frac{ f(z) }{ z-z_0 }dz\\] Now, \\[\\begin{align} \\int _\\gamma \\frac{ f(z) }{ z-z_0 } dz &=\\int _\\gamma \\frac{f(z)-f(z_0) + f(z_0)}{ z-z_0 } dz \\\\ &=\\int _\\gamma \\frac{ f(z) }{ z-z_0 }dz+ \\int_\\gamma \\frac{f(z)-f(z_0) }{ z-z_0 } dz \\\\ &= f(z_0) \\cdot 2\\pi i + \\int _\\gamma \\frac{ f(z)-f(z_0) }{ z-z_0 }dz \\end{align}\\] In order to find the second integral, consider the following expression, \\[\\left \\vert \\frac{ f(z)-f(z_0 ) }{ z-z_0 } \\right \\vert = \\frac{ \\vert f(z)-f(z_0 )\\vert}{ r }\\leq \\frac{ M_r }{ r }\\] Using the above inequality, the integral will be \\[\\begin{align} \\left \\vert \\int_\\gamma \\frac{ f(z)-f(z_0 ) }{ z-z_0 } \\right \\vert &\\leq \\frac{ M_r }{ r } \\int_\\gamma \\vert dz \\vert \\\\ &= \\frac{ M_r }{ r } \\ell(\\gamma) \\\\ &= \\frac{ M_r }{ \\cancel{r} }\\cdot 2\\pi \\cancel{r} \\\\ &= 2\\pi \\cdot M_r \\end{align}\\] But \\(f\\) is continuous at \\(z_0\\) , hence taking the limit \\(r\\to 0\\) , we get \\[\\lim_{r \\to 0} \\vert f(z) - f(z_0) \\vert = \\lim_{r \\to 0} M_r = 0,\\] By deformation we can make this \\(r\\) arbitralily small, hence taking the limit \\(r\\to 0\\) , we have \\[\\require{cancel} \\begin{align} \\lim_{r\\to 0}\\left \\vert \\int_\\gamma \\frac{ f(z)-f(z_0 ) }{ z-z_0 } \\right \\vert &\\leq \\lim_{r\\to 0} 2\\pi M_r = 0 \\end{align} \\] Hence the given integral will be, \\[ \\begin{align} \\int _\\Gamma \\frac{ f(z) }{ z-z_0 } dz &= f(z_0) \\cdot 2\\pi i \\\\ f(z_0) &= \\frac{ 1 }{ 2\\pi i } \\int _\\Gamma \\frac{ f(z) }{ z-z_0 } dz \\end{align} \\] Credits: Pinku Kumar","title":"Cauchy integral formula"},{"location":"complex-analysis/cauchy-theorem/","text":"Cauchy Theorem \u00b6 1. Simply and Multiply Connected Domains \u00b6 Simply Connected Domain A domain \\(D\\subseteq \\mathbb{ C }\\) is simply connected if \\(D\\) has no holes \\(\\Leftrightarrow C \\setminus D\\) is connected. Multiply Connected Domain A domain that is not simply connected is called multiply connected. 2. Cauchy Theorem \u00b6 Theorem: Let \\(D \\subseteq C\\) be simply connected domain and \\(f:D\\to \\mathbb{C}\\) is any analytic function. Then for any closed contour \\(\\gamma\\) in \\(D\\) , We have \\begin{align}\\int_\\gamma f(z) dz=0\\end{align} Proof: Let \\(f(z)= u(x,y) + iv(x,y)\\) and the contour \\[\\begin{align} \\gamma(t) &= x(t) + i y(t);& t\\in [a,b]\\\\ \\gamma'(t) &= x'(t) + i y'(t)& \\end{align}\\] Now the integration will be \\[\\begin{align} \\int_\\gamma f(z) dz &= \\int_a^b f(\\gamma(t))\\gamma'(t)dt \\\\ &= \\int_a^b (u(x,y) + iv(x,y)) (x' + iy') dt\\\\ &= \\int_a^b (ux'-vy') dt + i\\int_a^b(vx'+uy') dt \\\\ &= \\oint_\\gamma udx - vdy + i \\oint_\\gamma vdx +udy \\end{align}\\] Now usign green theorem, we get the follwoing integral as \\[\\begin{align} \\phantom{\\int_\\gamma f(z) dz} &= \\iint\\limits_{R}(-v_x - u_y)dy dx +\\iint\\limits_{R}(u_x - v_y) dy dx \\end{align}\\] Since \\(f\\) is analytic, hence it will satisfy the CR-equation, \\(i.e.,\\) \\(u_x=v_y\\) and \\(v_x=-u_y\\) \\[\\begin{align} \\phantom{\\int_\\gamma f(z) dz} &= \\iint\\limits_{R}(-v_x - u_y)dy dx +\\iint\\limits_{R}(u_x - v_y) dy dx\\\\ &= 0. \\end{align}\\] Ex: Find the following integration \\(\\displaystyle \\int_{\\vert z \\vert = 2}\\frac{ e^z }{ z^2-9 }dz\\) , \\(\\displaystyle \\int_{\\vert z \\vert = 2}\\frac{ 2z+1 }{ e^z }dz\\) . Here we have to evaluate the integral on a circle of radius \\(2\\) , centerd at \\(0\\) . For (1), the function \\(\\displaystyle f(z) = \\frac{ e^z }{ z^2-9 }\\) is analytic in entire complex plane except \\(z=\\pm 3\\) , but these points are outside the contour, hence by Cauchy theorem, the integration will be \\(0\\) . For (2), the function \\(\\displaystyle f(z) = \\frac{ 2z+1 }{ e^z }\\) is analytic in entire complex plane, hence by Cauchy theorem, the integration will be \\(0\\) . Note: A function of the form of \\(f/g\\) is analytic everywhere except \\(g=0\\) , provided \\(f\\) and \\(g\\) are analytic.","title":"Cauchy Theorem"},{"location":"complex-analysis/cauchy-theorem/#cauchy-theorem","text":"","title":"Cauchy Theorem"},{"location":"complex-analysis/cauchy-theorem/#1-simply-and-multiply-connected-domains","text":"Simply Connected Domain A domain \\(D\\subseteq \\mathbb{ C }\\) is simply connected if \\(D\\) has no holes \\(\\Leftrightarrow C \\setminus D\\) is connected. Multiply Connected Domain A domain that is not simply connected is called multiply connected.","title":"1. Simply and Multiply Connected Domains"},{"location":"complex-analysis/cauchy-theorem/#2-cauchy-theorem","text":"Theorem: Let \\(D \\subseteq C\\) be simply connected domain and \\(f:D\\to \\mathbb{C}\\) is any analytic function. Then for any closed contour \\(\\gamma\\) in \\(D\\) , We have \\begin{align}\\int_\\gamma f(z) dz=0\\end{align} Proof: Let \\(f(z)= u(x,y) + iv(x,y)\\) and the contour \\[\\begin{align} \\gamma(t) &= x(t) + i y(t);& t\\in [a,b]\\\\ \\gamma'(t) &= x'(t) + i y'(t)& \\end{align}\\] Now the integration will be \\[\\begin{align} \\int_\\gamma f(z) dz &= \\int_a^b f(\\gamma(t))\\gamma'(t)dt \\\\ &= \\int_a^b (u(x,y) + iv(x,y)) (x' + iy') dt\\\\ &= \\int_a^b (ux'-vy') dt + i\\int_a^b(vx'+uy') dt \\\\ &= \\oint_\\gamma udx - vdy + i \\oint_\\gamma vdx +udy \\end{align}\\] Now usign green theorem, we get the follwoing integral as \\[\\begin{align} \\phantom{\\int_\\gamma f(z) dz} &= \\iint\\limits_{R}(-v_x - u_y)dy dx +\\iint\\limits_{R}(u_x - v_y) dy dx \\end{align}\\] Since \\(f\\) is analytic, hence it will satisfy the CR-equation, \\(i.e.,\\) \\(u_x=v_y\\) and \\(v_x=-u_y\\) \\[\\begin{align} \\phantom{\\int_\\gamma f(z) dz} &= \\iint\\limits_{R}(-v_x - u_y)dy dx +\\iint\\limits_{R}(u_x - v_y) dy dx\\\\ &= 0. \\end{align}\\] Ex: Find the following integration \\(\\displaystyle \\int_{\\vert z \\vert = 2}\\frac{ e^z }{ z^2-9 }dz\\) , \\(\\displaystyle \\int_{\\vert z \\vert = 2}\\frac{ 2z+1 }{ e^z }dz\\) . Here we have to evaluate the integral on a circle of radius \\(2\\) , centerd at \\(0\\) . For (1), the function \\(\\displaystyle f(z) = \\frac{ e^z }{ z^2-9 }\\) is analytic in entire complex plane except \\(z=\\pm 3\\) , but these points are outside the contour, hence by Cauchy theorem, the integration will be \\(0\\) . For (2), the function \\(\\displaystyle f(z) = \\frac{ 2z+1 }{ e^z }\\) is analytic in entire complex plane, hence by Cauchy theorem, the integration will be \\(0\\) . Note: A function of the form of \\(f/g\\) is analytic everywhere except \\(g=0\\) , provided \\(f\\) and \\(g\\) are analytic.","title":"2. Cauchy Theorem"},{"location":"complex-analysis/complex-analysis/","text":"Welcome to complex analysis course \u00b6 This page is dedicated to the course of the complex analysis taught in the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur. 1. Objectives \u00b6 The course Complex Analysis focussed on the study of properties of complex functions. This is the second course on complex analysis in TMBU, Bhagalpur. The first course mainly introduce the concept of differentiability and analyticity in complex domains. Here we will discuss the integration in the sense of complex functions. Understand contour integration Apply Cauchy integral formula Important results based on CIF Ability to represent complex function as Power and Laurents series Understand different type of singularity Rouches theorem and application Application in solving improper integrals 2. References \u00b6 Complex Variables and Applications by Brown and Churchill Complex Analysis by Beck 3. Routine \u00b6 Weekday 1 st Period 2 nd Period 3 rd Period 4 th Period 5 th Period MON CA TUE CA WED CA THR CA FRI CA SAT CA 4. Instructor \u00b6 Sandeep Suman , Assistant Professor, TMBU, Bhagalpur","title":"Complex Analysis"},{"location":"complex-analysis/complex-analysis/#welcome-to-complex-analysis-course","text":"This page is dedicated to the course of the complex analysis taught in the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur.","title":"Welcome to complex analysis course"},{"location":"complex-analysis/complex-analysis/#1-objectives","text":"The course Complex Analysis focussed on the study of properties of complex functions. This is the second course on complex analysis in TMBU, Bhagalpur. The first course mainly introduce the concept of differentiability and analyticity in complex domains. Here we will discuss the integration in the sense of complex functions. Understand contour integration Apply Cauchy integral formula Important results based on CIF Ability to represent complex function as Power and Laurents series Understand different type of singularity Rouches theorem and application Application in solving improper integrals","title":"1. Objectives"},{"location":"complex-analysis/complex-analysis/#2-references","text":"Complex Variables and Applications by Brown and Churchill Complex Analysis by Beck","title":"2. References"},{"location":"complex-analysis/complex-analysis/#3-routine","text":"Weekday 1 st Period 2 nd Period 3 rd Period 4 th Period 5 th Period MON CA TUE CA WED CA THR CA FRI CA SAT CA","title":"3. Routine"},{"location":"complex-analysis/complex-analysis/#4-instructor","text":"Sandeep Suman , Assistant Professor, TMBU, Bhagalpur","title":"4. Instructor"},{"location":"complex-analysis/exam/","text":"Exams \u00b6 The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assessment that belongs to attendance, seminar and assignments. Practice the following question for exams Unit 1 Types of Path/Contour/Arc (Definition + Examplex) Calculating Contour Integral using Parametrization (Statement + Proof + Problems) Simply Connected and Multiply connected domains (Defintion + Examples) Use path independence when antiderivative exists (Threome + Proof + Problems) Cauchy Theorem (Statement + Proof + Problems) Morera's Theorem (Statement + Proof) Unit 2 Deformation Theorem (Statement) Cauchy integral formula (Statement + Proof + Problems) Gauss Mean Value Theorem (Statement + Proof) Maximum Modulus Theorem (Statement + Proof + Problems) Minimum Modulus Theorem (Statement + Proof) Liovellie's Theorem (Statement + Proof) Schwartz Lemma (Statement + Proof) Cauchy's Inequality (Statement + Proof + Problems) Unit 3 Power Series (Definition + Examples) Radius of Convergence (Problems) Taylor's Theorem (Statement + Proof + Problems) Laurent's Theorem (Statement + Proof + Problems) Unit 4 Singularities(Defintion + Problems) Analytic continuation(Definition Only) Unit 5 Zeros and Poles of complex meromorphic function(Definition + Problems) Argument Principle/Theorem (Statement + Proof + Problems) Rouche's Theorem (Statement + Proof + Problems) Integration of type \\(\\displaystyle \\int_{-\\infty}^{\\infty} f(x)\\, dx\\) 1. Internal Exam \u00b6 Internal exam consist of 5 objectives and 3 descriptive questions, out of which you have to answer all objectives and 2 descriptive questions. 1.1 Session 2017-19 \u00b6 Quesion of Internal Exams: Download Here 2. Final Exam \u00b6 Final exam divided in three groups. The questions are organized in three groups as follows: Group Questions Marks Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"Exam"},{"location":"complex-analysis/exam/#exams","text":"The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assessment that belongs to attendance, seminar and assignments. Practice the following question for exams Unit 1 Types of Path/Contour/Arc (Definition + Examplex) Calculating Contour Integral using Parametrization (Statement + Proof + Problems) Simply Connected and Multiply connected domains (Defintion + Examples) Use path independence when antiderivative exists (Threome + Proof + Problems) Cauchy Theorem (Statement + Proof + Problems) Morera's Theorem (Statement + Proof) Unit 2 Deformation Theorem (Statement) Cauchy integral formula (Statement + Proof + Problems) Gauss Mean Value Theorem (Statement + Proof) Maximum Modulus Theorem (Statement + Proof + Problems) Minimum Modulus Theorem (Statement + Proof) Liovellie's Theorem (Statement + Proof) Schwartz Lemma (Statement + Proof) Cauchy's Inequality (Statement + Proof + Problems) Unit 3 Power Series (Definition + Examples) Radius of Convergence (Problems) Taylor's Theorem (Statement + Proof + Problems) Laurent's Theorem (Statement + Proof + Problems) Unit 4 Singularities(Defintion + Problems) Analytic continuation(Definition Only) Unit 5 Zeros and Poles of complex meromorphic function(Definition + Problems) Argument Principle/Theorem (Statement + Proof + Problems) Rouche's Theorem (Statement + Proof + Problems) Integration of type \\(\\displaystyle \\int_{-\\infty}^{\\infty} f(x)\\, dx\\)","title":"Exams"},{"location":"complex-analysis/exam/#1-internal-exam","text":"Internal exam consist of 5 objectives and 3 descriptive questions, out of which you have to answer all objectives and 2 descriptive questions.","title":"1. Internal Exam"},{"location":"complex-analysis/exam/#11-session-2017-19","text":"Quesion of Internal Exams: Download Here","title":"1.1 Session 2017-19"},{"location":"complex-analysis/exam/#2-final-exam","text":"Final exam divided in three groups. The questions are organized in three groups as follows: Group Questions Marks Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"2. Final Exam"},{"location":"complex-analysis/function/","text":"Function \u00b6 After learning about complex numbers, now we are in position to learn about functions that map complex numbers to complex number, i.e., \\(f: \\mathbb{C} \\to \\mathbb{C}\\) . If \\(z=x+iy\\) , then \\(f\\) can be written as \\begin{align} f(z=x+iy) &= u(x,y)+iv(x,y) \\end{align} Where \\(u,v:\\mathbb{R}^2 \\to \\mathbb{R}\\) , \\(u\\) is called the real part and \\(v\\) is called the imaginary part of a complex valued funcion \\(f\\) . \\(\\displaystyle x^{2} + 2 i x y - y^{2}\\) Now we will visualize real and imaginary part of the above function as contour plot. Now we try to visualize some of the functions in complex domain. Visualizing complex functions are not easy because it require \\(4-\\) dimensional space to plot a complex functions, and most of us can't visualize \\(4-\\) dimensional space. Other way is to look at the image different shapes of complex plane under these mappings. Here we look at the image of a square region \\([1,3]\\times[1,3]\\) under some common mapping.","title":"Complex Functions"},{"location":"complex-analysis/function/#function","text":"After learning about complex numbers, now we are in position to learn about functions that map complex numbers to complex number, i.e., \\(f: \\mathbb{C} \\to \\mathbb{C}\\) . If \\(z=x+iy\\) , then \\(f\\) can be written as \\begin{align} f(z=x+iy) &= u(x,y)+iv(x,y) \\end{align} Where \\(u,v:\\mathbb{R}^2 \\to \\mathbb{R}\\) , \\(u\\) is called the real part and \\(v\\) is called the imaginary part of a complex valued funcion \\(f\\) . \\(\\displaystyle x^{2} + 2 i x y - y^{2}\\) Now we will visualize real and imaginary part of the above function as contour plot. Now we try to visualize some of the functions in complex domain. Visualizing complex functions are not easy because it require \\(4-\\) dimensional space to plot a complex functions, and most of us can't visualize \\(4-\\) dimensional space. Other way is to look at the image different shapes of complex plane under these mappings. Here we look at the image of a square region \\([1,3]\\times[1,3]\\) under some common mapping.","title":"Function"},{"location":"complex-analysis/integration/","text":"A contour is a finite collection of paths joined end to end. A path can be represented as a continuous function form an closed iterval to \\(\\mathbb{C}\\) as follows \\[ \\gamma: [a~ b]\\subset \\mathbb{R} \\to \\mathbb{C}; \\quad \\gamma = \\gamma(t)\\] Then the integration of any complex function along this path is is given by \\[\\int_\\gamma f(z)dz = \\int_a^b f(t)~\\gamma'(t)~dt = \\sum_{i=1}^n f(t_i) \\left[\\gamma(t_i)-\\gamma(t_{i-1})\\right]\\] Question: Find the integration of \\(f(z)=z^2\\) along the parabolic path from \\(0\\) to \\(1\\) . Answer: In order to find the integration we have to find to parametrize the curve as \\(\\gamma(t)=t+t^2i\\) , \\(t\\in [0,1]\\) . Numerical Computation \u00b6 We can subdivide the curve into equal parts and then compute the sum as given in the definition. For 100 subdivisions we have the following result \\(\\displaystyle -0.681868679980602 + 0.675438053988273 i\\) We can improve the accuracy by increasing the number of subdivisions, For example the same integration for 1000 subdivisions will be \\(\\displaystyle -0.668168668668 + 0.66753436803537 i\\) We can plot the result for a number of points to see the convergence in complex plane as follows 1. Parametrization \u00b6 Now we do the same computation using the parametrization of the curve, hence the value turns out to be exactly equalt to \\(\\displaystyle -0.666666666666667 + 0.666666666666667 i\\)","title":"Contour Integration"},{"location":"complex-analysis/integration/#numerical-computation","text":"We can subdivide the curve into equal parts and then compute the sum as given in the definition. For 100 subdivisions we have the following result \\(\\displaystyle -0.681868679980602 + 0.675438053988273 i\\) We can improve the accuracy by increasing the number of subdivisions, For example the same integration for 1000 subdivisions will be \\(\\displaystyle -0.668168668668 + 0.66753436803537 i\\) We can plot the result for a number of points to see the convergence in complex plane as follows","title":"Numerical Computation"},{"location":"complex-analysis/integration/#1-parametrization","text":"Now we do the same computation using the parametrization of the curve, hence the value turns out to be exactly equalt to \\(\\displaystyle -0.666666666666667 + 0.666666666666667 i\\)","title":"1. Parametrization"},{"location":"complex-analysis/introduction/","text":"In this section we will define complex numbers as an extension of \\(\\mathbb{R}\\) as the following \\[\\mathbb{C} \\cong \\mathbb{R}[x] / \\langle x^2+1 \\rangle = \\{a+bx+\\langle x^2+1 \\rangle\\ | ~ a,b \\in \\mathbb{R} \\}\\] Algebra of Complex Number \u00b6 Addition of two complex numbers are done as follows \\(\\displaystyle a + b x + c + d x = a + c + x \\left(b + d\\right)\\) Multiplication is done as follows \\(\\displaystyle \\left(a + b x\\right) \\left(c + d x\\right) = a c + a d x + b c x + b d x^{2}\\) \\(\\displaystyle a c - b d + x \\left(a d + b c\\right)\\)","title":"Definition and Algebra"},{"location":"complex-analysis/introduction/#algebra-of-complex-number","text":"Addition of two complex numbers are done as follows \\(\\displaystyle a + b x + c + d x = a + c + x \\left(b + d\\right)\\) Multiplication is done as follows \\(\\displaystyle \\left(a + b x\\right) \\left(c + d x\\right) = a c + a d x + b c x + b d x^{2}\\) \\(\\displaystyle a c - b d + x \\left(a d + b c\\right)\\)","title":"Algebra of Complex Number"},{"location":"complex-analysis/laurent/","text":"Laurent Series \u00b6 This thorem says that any analytic function in an annulus region has series expansion consist of positive and negative powers of \\(z\\) . Taylor's Thorem Let \\(\\Omega\\) be an annulus formed by two concentric circle of radius \\(r_1\\) and \\(r_2\\) with center \\(a\\) and \\(r_1 < r_2\\) . open connected set and let \\(a\\in \\Omega\\) . Let \\(f:\\Omega\u2192\\mathbb{C}\\) be analytic on \\(\\Omega\\) . Then there exists an \\(r>0\\) such that \\( \\(f(z)=\\sum_{n=0}^\\infty \\dfrac{f^{(n)}(a)}{n!}(z\u2212a)^n; \\quad z \u2208 D(a,r).\\) \\) In other words, the Taylor series of \\(f\\) at \\(a\\) converges uniformly and absolutely to \\(f\\) for all \\(z\u2208D(a,r)\\) .","title":"Laurent Series"},{"location":"complex-analysis/laurent/#laurent-series","text":"This thorem says that any analytic function in an annulus region has series expansion consist of positive and negative powers of \\(z\\) . Taylor's Thorem Let \\(\\Omega\\) be an annulus formed by two concentric circle of radius \\(r_1\\) and \\(r_2\\) with center \\(a\\) and \\(r_1 < r_2\\) . open connected set and let \\(a\\in \\Omega\\) . Let \\(f:\\Omega\u2192\\mathbb{C}\\) be analytic on \\(\\Omega\\) . Then there exists an \\(r>0\\) such that \\( \\(f(z)=\\sum_{n=0}^\\infty \\dfrac{f^{(n)}(a)}{n!}(z\u2212a)^n; \\quad z \u2208 D(a,r).\\) \\) In other words, the Taylor series of \\(f\\) at \\(a\\) converges uniformly and absolutely to \\(f\\) for all \\(z\u2208D(a,r)\\) .","title":"Laurent Series"},{"location":"complex-analysis/maximum-modulus-theorem/","text":"Maximum Modulus Theorem \u00b6 This is a celebrated results in complex analysis, it says that the maximum of non-constant analytics function occur on the boundary of a domain. Maximum Modulus Theorem Let \\(f\\) is analytic in a connected domain \\(\\Omega\\) , then the maximum value of \\(\\vert f(z) \\vert\\) occur on the boundary of the domain, i.e., \\(\\partial \\Omega\\) . Proof: In order to prove this theorem first we will prove this result for a disc stated as follows Local Mean Value Theorem If \\(f\\) is analytic on a disc of radius \\(r\\) with centre \\(a\\) , such that \\(\\vert f(a) \\vert \\geq \\vert f(z) \\vert\\) , for all \\(z\\) in the disc, then \\(f\\) is constant on the disc. 1. Schwartz Lemma \u00b6 Schwartz Lemma Let \\(\\bf{D}\\) be the unit disc and \\(f: \\bf{D}\\to \\bf{D}\\) is analytic function then, \\(\\vert f(z) \\vert \\leq \\vert z \\vert\\) , for all \\(z \\in \\bf{D}\\) \\(\\vert f'(0) \\vert \\leq 1\\) if there exist a \\(z_0\\in \\bf{D}\\) , such that \\(\\vert f(z_0) \\vert = \\vert z_0 \\vert\\) or \\(\\vert f'(0) = 1\\) , then \\(f\\) is a rotation.","title":"Maximum Modulus Theorem"},{"location":"complex-analysis/maximum-modulus-theorem/#maximum-modulus-theorem","text":"This is a celebrated results in complex analysis, it says that the maximum of non-constant analytics function occur on the boundary of a domain. Maximum Modulus Theorem Let \\(f\\) is analytic in a connected domain \\(\\Omega\\) , then the maximum value of \\(\\vert f(z) \\vert\\) occur on the boundary of the domain, i.e., \\(\\partial \\Omega\\) . Proof: In order to prove this theorem first we will prove this result for a disc stated as follows Local Mean Value Theorem If \\(f\\) is analytic on a disc of radius \\(r\\) with centre \\(a\\) , such that \\(\\vert f(a) \\vert \\geq \\vert f(z) \\vert\\) , for all \\(z\\) in the disc, then \\(f\\) is constant on the disc.","title":"Maximum Modulus Theorem"},{"location":"complex-analysis/maximum-modulus-theorem/#1-schwartz-lemma","text":"Schwartz Lemma Let \\(\\bf{D}\\) be the unit disc and \\(f: \\bf{D}\\to \\bf{D}\\) is analytic function then, \\(\\vert f(z) \\vert \\leq \\vert z \\vert\\) , for all \\(z \\in \\bf{D}\\) \\(\\vert f'(0) \\vert \\leq 1\\) if there exist a \\(z_0\\in \\bf{D}\\) , such that \\(\\vert f(z_0) \\vert = \\vert z_0 \\vert\\) or \\(\\vert f'(0) = 1\\) , then \\(f\\) is a rotation.","title":"1. Schwartz Lemma"},{"location":"complex-analysis/paths/","text":"Contour in Complex Analysis \u00b6 Def: A path is a continuous funtion \\(\\gamma :[a,b] \\subseteq \\mathbb{R} \\to \\mathbb{ C }\\) . \\( \\(\\gamma(t) = x(t) + i y(t)\\) \\) Ex: $$ \\begin{align} \\gamma: [0,1] &\\to \\mathbb{ C }\\ t &\\leadsto t+it \\end{align} $$ Ex: $$ \\begin{align} \\gamma: [0,2] &\\to \\mathbb{ C }\\ t &\\leadsto t+it^2 \\end{align} $$ Ex: $$ \\begin{align} \\gamma: [0,\\pi] &\\to \\mathbb{ C }\\ t &\\leadsto e^{it} \\end{align} $$ 1. Types of Paths \u00b6 Simple Path: A path is called is called simple if if it doesn't intersect except at the end points. \\(i.e.,\\) \\(\\forall t_1, t_2 \\in (a,b)\\) \\( \\(\\gamma(t_1) \\neq \\gamma(t_2) \\Leftrightarrow t_1 \\neq t_2\\) \\) Smooth Path: A path is called smooth if it is continuously differentiable and has non-zero derivatives, \\(i.e.,\\) \\( \\(\\gamma \\in \\mathcal{C}^1; \\quad \\gamma(t) \\neq 0.\\) \\) Closed Path: A path is closed if the end points are joined, \\(i.e.,\\) \\( \\(\\gamma(a) = \\gamma(b).\\) \\) Credits: Pinku Kumar, Pranav Kumar","title":"Contour"},{"location":"complex-analysis/paths/#contour-in-complex-analysis","text":"Def: A path is a continuous funtion \\(\\gamma :[a,b] \\subseteq \\mathbb{R} \\to \\mathbb{ C }\\) . \\( \\(\\gamma(t) = x(t) + i y(t)\\) \\) Ex: $$ \\begin{align} \\gamma: [0,1] &\\to \\mathbb{ C }\\ t &\\leadsto t+it \\end{align} $$ Ex: $$ \\begin{align} \\gamma: [0,2] &\\to \\mathbb{ C }\\ t &\\leadsto t+it^2 \\end{align} $$ Ex: $$ \\begin{align} \\gamma: [0,\\pi] &\\to \\mathbb{ C }\\ t &\\leadsto e^{it} \\end{align} $$","title":"Contour in Complex Analysis"},{"location":"complex-analysis/paths/#1-types-of-paths","text":"Simple Path: A path is called is called simple if if it doesn't intersect except at the end points. \\(i.e.,\\) \\(\\forall t_1, t_2 \\in (a,b)\\) \\( \\(\\gamma(t_1) \\neq \\gamma(t_2) \\Leftrightarrow t_1 \\neq t_2\\) \\) Smooth Path: A path is called smooth if it is continuously differentiable and has non-zero derivatives, \\(i.e.,\\) \\( \\(\\gamma \\in \\mathcal{C}^1; \\quad \\gamma(t) \\neq 0.\\) \\) Closed Path: A path is closed if the end points are joined, \\(i.e.,\\) \\( \\(\\gamma(a) = \\gamma(b).\\) \\) Credits: Pinku Kumar, Pranav Kumar","title":"1. Types of Paths"},{"location":"complex-analysis/plotting/","text":"A complex numbers \\(x+iy\\) can be plotted in cartesian coordinate as the point \\((x,y)\\) . This plane is called Argand plane. Addition and Substraction \u00b6 Addition and substraction of complex numbers in Argand plane are similar to the vector addition and multiplication. 1. Multiplication in Complex Numbers \u00b6 If we multiply two complex number \\(z_1=r_1e^{i\\theta_1}\\) and \\(z_2=r_2e^{i\\theta_2}\\) , then we get \\[z_1\\cdot z_2 = r_1\\cdot r_2 e^{i (\\theta_1 + \\theta_2)}\\] Hence in polar coordinate, the magnitude will get multiplies while angle will get added. 2. Sequence and Series in Complex Numbers \u00b6 Similar to real sequance, a complex sequence in simple a function \\(f: \\mathbb{N} \\to \\mathbb{C}\\) . Example of a diverging sequence.","title":"Argand Plane"},{"location":"complex-analysis/plotting/#addition-and-substraction","text":"Addition and substraction of complex numbers in Argand plane are similar to the vector addition and multiplication.","title":"Addition and Substraction"},{"location":"complex-analysis/plotting/#1-multiplication-in-complex-numbers","text":"If we multiply two complex number \\(z_1=r_1e^{i\\theta_1}\\) and \\(z_2=r_2e^{i\\theta_2}\\) , then we get \\[z_1\\cdot z_2 = r_1\\cdot r_2 e^{i (\\theta_1 + \\theta_2)}\\] Hence in polar coordinate, the magnitude will get multiplies while angle will get added.","title":"1. Multiplication in Complex Numbers"},{"location":"complex-analysis/plotting/#2-sequence-and-series-in-complex-numbers","text":"Similar to real sequance, a complex sequence in simple a function \\(f: \\mathbb{N} \\to \\mathbb{C}\\) . Example of a diverging sequence.","title":"2. Sequence and Series in Complex Numbers"},{"location":"complex-analysis/power-series/","text":"Power Series \u00b6 A series of the form of $$ f(z) = \\sum_{n=0}^\\infty a_n (z-a)^n \\quad a_n \\in \\mathbb{C}$$ is called a power series. Here, \\(a\\) is called the center of the power series. 1. Radius of Convergence \u00b6 Definition For any power series there exist a real number \\(R\\geq 0\\) , such that, the given power series converges in open disc of radius \\(R\\) , i.e., \\(\\vert z - a \\vert < R\\) , while diverges for all \\(z\\) outside the closed disc of radius \\(R\\) , i.e., \\(\\vert z - a \\vert > R\\) . Such \\(R\\) is called the radius of convergence the given power series. Warning At the circle of convergence, i.e., at \\(\\vert z - a\\vert = R\\) , the power series can converge for some \\(z\\) or diverge for some other points. For example consider the power series, $$ f(z) = \\sum_{n=0}^\\infty \\dfrac{z^n}{n}, $$ the radius of convergence will be \\(1\\) . It diverge for \\(z=1\\) but converge for \\(z=-1\\) , both lie on the circle of convergence. 2. Method of finding Radius of Convergence \u00b6 Two theorem from real analysis usualy used to find the radius of convergence as mentioned below. Ratio Test For the power series \\(\\sum_{n=0}^\\infty a_n (z-a)^n\\) , consider the followin limit exist, $$ L = \\lim_{n\\to \\infty}\\left \\vert \\dfrac{a_n}{a_{n+1}}\\right\\vert.$$ Then If \\(L < 1\\) , then the series absolutely converges. If \\(L > 1\\) , then the series diverges. If \\(L = 1\\) , then the series is either divergent or convergen Hence, the radius of convergence will be \\(R = 1/L\\) . Root Test/Cauchy Hadamard Test For the power series \\(\\sum_{n=0}^\\infty a_n (z-a)^n\\) , the radius of converge is given by \\( \\(\\dfrac{1}{R} = \\limsup_{n\\to \\infty} \\left\\vert a_n \\right \\vert ^{\\dfrac{1}{n}}\\) \\)","title":"Power Series"},{"location":"complex-analysis/power-series/#power-series","text":"A series of the form of $$ f(z) = \\sum_{n=0}^\\infty a_n (z-a)^n \\quad a_n \\in \\mathbb{C}$$ is called a power series. Here, \\(a\\) is called the center of the power series.","title":"Power Series"},{"location":"complex-analysis/power-series/#1-radius-of-convergence","text":"Definition For any power series there exist a real number \\(R\\geq 0\\) , such that, the given power series converges in open disc of radius \\(R\\) , i.e., \\(\\vert z - a \\vert < R\\) , while diverges for all \\(z\\) outside the closed disc of radius \\(R\\) , i.e., \\(\\vert z - a \\vert > R\\) . Such \\(R\\) is called the radius of convergence the given power series. Warning At the circle of convergence, i.e., at \\(\\vert z - a\\vert = R\\) , the power series can converge for some \\(z\\) or diverge for some other points. For example consider the power series, $$ f(z) = \\sum_{n=0}^\\infty \\dfrac{z^n}{n}, $$ the radius of convergence will be \\(1\\) . It diverge for \\(z=1\\) but converge for \\(z=-1\\) , both lie on the circle of convergence.","title":"1. Radius of Convergence"},{"location":"complex-analysis/power-series/#2-method-of-finding-radius-of-convergence","text":"Two theorem from real analysis usualy used to find the radius of convergence as mentioned below. Ratio Test For the power series \\(\\sum_{n=0}^\\infty a_n (z-a)^n\\) , consider the followin limit exist, $$ L = \\lim_{n\\to \\infty}\\left \\vert \\dfrac{a_n}{a_{n+1}}\\right\\vert.$$ Then If \\(L < 1\\) , then the series absolutely converges. If \\(L > 1\\) , then the series diverges. If \\(L = 1\\) , then the series is either divergent or convergen Hence, the radius of convergence will be \\(R = 1/L\\) . Root Test/Cauchy Hadamard Test For the power series \\(\\sum_{n=0}^\\infty a_n (z-a)^n\\) , the radius of converge is given by \\( \\(\\dfrac{1}{R} = \\limsup_{n\\to \\infty} \\left\\vert a_n \\right \\vert ^{\\dfrac{1}{n}}\\) \\)","title":"2. Method of finding Radius of Convergence"},{"location":"complex-analysis/real-function/","text":"Complex valued function of real variable \u00b6 Let \\(f:I \\subseteq \\mathbb{R} \\to \\mathbb{C}\\) , such that, \\(f\\in \\mathcal{C}^1\\) , then \\( \\(f(x)=g(x) + ih(x)\\quad x\\in\\mathbb{R}\\) \\) Ex: \\(f(t) = e^{it}\\) , \\(t\\in\\mathbb{R}\\) Ex: \\(f(t)= (t+1) +(3t-1)i\\) Ex: \\(f(t)=t^2 + t^3 i\\) 1. Differentiation \u00b6 Differentiation of such function is done term by term as follows $$f'(t)=g'(t) + ih'(t) $$ Ex: \\[\\begin{align} f(t) &= e^{it} &=& \\cos t + i \\cdot \\sin t \\\\ f'(t) &= ie^{it} &=& -\\sin t + i \\cos t \\\\ &&=& i(\\cos t + i \\cdot \\sin t) \\\\ &&=& ie^{it} \\\\ \\end{align}\\] We can see that, both ways we got the same anser. 2. Integration \u00b6 Integration of such function is done term by term as follows, $$ \\int f(t) = \\int g(t) dt + i \\int h(t) dt $$ Ex: \\[\\begin{align} f(t) &= t^2 + it^3 \\\\ \\int f(t) dt &= \\int t^2 dt + i \\int t^3 dt \\\\ &= \\frac{ t^3 }{ 3 } + i \\frac{ t^4 }{ 4 } + C \\end{align}\\] 3. Legth \u00b6 The length of the curve is conputed as the following formula \\[\\begin{align} (ds)^2 &= (dx)^2 + (dy)^2\\\\ ds &= \\sqrt{(dx)^2 + (dy)^2} \\\\ &= \\sqrt{ 1 + \\left(\\frac{ dy }{ dx }\\right)^2} dx\\\\ \\end{align}\\] Integrating we get length of the curve as $$ \\int_a^b ds=\\int_a^b\\sqrt{ 1 + \\left(\\frac{ dy }{ dx }\\right)^2}dx$$ Credits: Pinku Kumar, Pranav Kumar","title":"Real Functions"},{"location":"complex-analysis/real-function/#complex-valued-function-of-real-variable","text":"Let \\(f:I \\subseteq \\mathbb{R} \\to \\mathbb{C}\\) , such that, \\(f\\in \\mathcal{C}^1\\) , then \\( \\(f(x)=g(x) + ih(x)\\quad x\\in\\mathbb{R}\\) \\) Ex: \\(f(t) = e^{it}\\) , \\(t\\in\\mathbb{R}\\) Ex: \\(f(t)= (t+1) +(3t-1)i\\) Ex: \\(f(t)=t^2 + t^3 i\\)","title":"Complex valued function of real variable"},{"location":"complex-analysis/real-function/#1-differentiation","text":"Differentiation of such function is done term by term as follows $$f'(t)=g'(t) + ih'(t) $$ Ex: \\[\\begin{align} f(t) &= e^{it} &=& \\cos t + i \\cdot \\sin t \\\\ f'(t) &= ie^{it} &=& -\\sin t + i \\cos t \\\\ &&=& i(\\cos t + i \\cdot \\sin t) \\\\ &&=& ie^{it} \\\\ \\end{align}\\] We can see that, both ways we got the same anser.","title":"1. Differentiation"},{"location":"complex-analysis/real-function/#2-integration","text":"Integration of such function is done term by term as follows, $$ \\int f(t) = \\int g(t) dt + i \\int h(t) dt $$ Ex: \\[\\begin{align} f(t) &= t^2 + it^3 \\\\ \\int f(t) dt &= \\int t^2 dt + i \\int t^3 dt \\\\ &= \\frac{ t^3 }{ 3 } + i \\frac{ t^4 }{ 4 } + C \\end{align}\\]","title":"2. Integration"},{"location":"complex-analysis/real-function/#3-legth","text":"The length of the curve is conputed as the following formula \\[\\begin{align} (ds)^2 &= (dx)^2 + (dy)^2\\\\ ds &= \\sqrt{(dx)^2 + (dy)^2} \\\\ &= \\sqrt{ 1 + \\left(\\frac{ dy }{ dx }\\right)^2} dx\\\\ \\end{align}\\] Integrating we get length of the curve as $$ \\int_a^b ds=\\int_a^b\\sqrt{ 1 + \\left(\\frac{ dy }{ dx }\\right)^2}dx$$ Credits: Pinku Kumar, Pranav Kumar","title":"3. Legth"},{"location":"complex-analysis/results-on-cauchy-integral-formula/","text":"Results Based on CIF \u00b6 Cauchy Integral formula is prominent in complex analysis. It results in many properties of analytic functions. 1. Liouvilles Thorem \u00b6 Liouvilles Thorem Any bounded entire function is constant. Proof: 2. Fundamental Theorem of Algebra \u00b6 Fundamental Theorem of Algebra Any polynomial over complex field has at least one root. Proof: 3. Gauss Mean Value Theorem \u00b6 Gauss Mean Value Theorem If \\(f\\) is analytic inside and on a circular path centred at \\(a\\) with radius \\(r\\) , then \\( \\(f(a)=\\dfrac{1}{2\\pi}\\int_0^{2\\pi} f(a+re^{i\\theta})d\\theta\\) \\) Proof: 4. Maximum Modulus Theorems \u00b6 Maximum Modulus Theorem For an analytic function, the maximum value of modulus of the function occur on the boundary of the domain. Proof: To prove this theorem we have to first prove the local maximum modulus theorem, which says the following Local Maximum Modulus Theorem For an analytic function defined on a domain \\(\\Omega\\)","title":"Results Based on CIF"},{"location":"complex-analysis/results-on-cauchy-integral-formula/#results-based-on-cif","text":"Cauchy Integral formula is prominent in complex analysis. It results in many properties of analytic functions.","title":"Results Based on CIF"},{"location":"complex-analysis/results-on-cauchy-integral-formula/#1-liouvilles-thorem","text":"Liouvilles Thorem Any bounded entire function is constant. Proof:","title":"1. Liouvilles Thorem"},{"location":"complex-analysis/results-on-cauchy-integral-formula/#2-fundamental-theorem-of-algebra","text":"Fundamental Theorem of Algebra Any polynomial over complex field has at least one root. Proof:","title":"2. Fundamental Theorem of Algebra"},{"location":"complex-analysis/results-on-cauchy-integral-formula/#3-gauss-mean-value-theorem","text":"Gauss Mean Value Theorem If \\(f\\) is analytic inside and on a circular path centred at \\(a\\) with radius \\(r\\) , then \\( \\(f(a)=\\dfrac{1}{2\\pi}\\int_0^{2\\pi} f(a+re^{i\\theta})d\\theta\\) \\) Proof:","title":"3. Gauss Mean Value Theorem"},{"location":"complex-analysis/results-on-cauchy-integral-formula/#4-maximum-modulus-theorems","text":"Maximum Modulus Theorem For an analytic function, the maximum value of modulus of the function occur on the boundary of the domain. Proof: To prove this theorem we have to first prove the local maximum modulus theorem, which says the following Local Maximum Modulus Theorem For an analytic function defined on a domain \\(\\Omega\\)","title":"4. Maximum Modulus Theorems"},{"location":"complex-analysis/taylor/","text":"Taylor's Theorem \u00b6 This thorem says that any analytic function in a circular domain has a power series expansion. Taylor's Thorem Let \\(\\Omega\\) be an open connected set and let \\(a\\in \\Omega\\) . Let \\(f:\\Omega\u2192\\mathbb{C}\\) be analytic on \\(\\Omega\\) . Then there exists an \\(r>0\\) such that \\( \\(f(z)=\\sum_{n=0}^\\infty \\dfrac{f^{(n)}(a)}{n!}(z\u2212a)^n; \\quad z \u2208 D(a,r).\\) \\) In other words, the Taylor series of \\(f\\) at \\(a\\) converges uniformly and absolutely to \\(f\\) for all \\(z\u2208D(a,r)\\) . print ( \"Hello World!\" ) sequenceDiagram autonumber Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Taylor Theorem"},{"location":"complex-analysis/taylor/#taylors-theorem","text":"This thorem says that any analytic function in a circular domain has a power series expansion. Taylor's Thorem Let \\(\\Omega\\) be an open connected set and let \\(a\\in \\Omega\\) . Let \\(f:\\Omega\u2192\\mathbb{C}\\) be analytic on \\(\\Omega\\) . Then there exists an \\(r>0\\) such that \\( \\(f(z)=\\sum_{n=0}^\\infty \\dfrac{f^{(n)}(a)}{n!}(z\u2212a)^n; \\quad z \u2208 D(a,r).\\) \\) In other words, the Taylor series of \\(f\\) at \\(a\\) converges uniformly and absolutely to \\(f\\) for all \\(z\u2208D(a,r)\\) . print ( \"Hello World!\" ) sequenceDiagram autonumber Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Taylor's Theorem"},{"location":"complex-analysis/video/","text":"Plotting Video \u00b6 1. Testing Video \u00b6 Your browser does not support the video tag.","title":"Video"},{"location":"complex-analysis/video/#plotting-video","text":"","title":"Plotting Video"},{"location":"complex-analysis/video/#1-testing-video","text":"Your browser does not support the video tag.","title":"1. Testing Video"},{"location":"linear-algebra/21-23/","text":"Progress Report \u00b6 S. No. Date Notes 1 20/08/2022 Finite dimension vector space 2 22/08/2022 Vector space 3 24/08/2022 Example of vector space 4 25/08/2022 Example of vector space and their properties 5 26/08/2022 Finite dimension 6 27/08/2022 Linear transformation 7 29/08/2022 Gaussian elimination method 8 30/08/2022 CSIR NET Exam and Syllabus 9 31/08/2022 Gaussian elimination method 10 01/09/2022 Example of gaussian elimination method 11 02/09/2022 RREF Form 12 03/09/2022 Eigen value and eigen vector 13 05/09/2022 Eigen vector 14 06/09/2022 Diagonalization 15 07/09/2022 Diagonalization 16 10/09/2022 Minimal polynomial 17 12/09/2022 Minimal polynomial 18 13/09/2022 Matrix representation of linear transformation 19 15/09/2022 Example of matrix representation of linear transformation 20 16/09/2022 Similar matrices 21 19/09/2022 Invariant subspace 22 21/09/2022 Theorem of invariant subspace 23 22/09/2022 Generalised eigenvector 24 23/09/2022 Generalised eigenspace 25 24/09/2022 Generalised eigenspace is invariant 26 27/09/2022 Theorem of invariant subspace 27 28/09/2022 Nilpotent transformation 28 28/09/2022 Jordan canonical form 29 10/10/2022 Example of jordan canonical form 30 11/10/2022 Primary decomposition theorem (statement) 31 12/10/2022 Primary decomposition theorem (proof) 32 13/10/2022 Rational canonical form 33 14/10/2022 Example of Rational canonical form 34 15/10/2022 Example of jordan canonical form 35 17/10/2022 Inner product space 36 18/10/2022 Projection 37 02/11/2022 Inner product 38 03/11/2022 Example of inner product 39 11/11/2022 Projection 40 12/11/2022 Example fo projection 41 14/11/2022 Norm 42 15/11/2022 Example of inner product 43 17/11/2022 Gaussian elimination method 44 30/11/2022 Assignment problems 45 28/11/2022 Assignment problems 46 05/12/2022 Hermition martix 47 07/12/2022 Skew- hermition matrix 48 09/12/2022 Unitary matrix 49 10/12/2022 Self adjoint operators 50 13/12/2022 Gram schmidt orthogonalization process 51 14/12/2022 Example of gram schmidt orthogonal 52 15/12/2022 Example of gram gram schmidt 53 16/12/2022 Bilinear form or transformation 54 17/12/2022 Algebra of bilinear 55 20/12/2022 Theorem :- the set of all bilinear form over a vector space v, form a vector space 56 26/12/2022 Privious class theorem continue 57 23/12/2022 Example of bilinear form 58 27/12/2022 Matrix of bilinear form","title":"21-23"},{"location":"linear-algebra/21-23/#progress-report","text":"S. No. Date Notes 1 20/08/2022 Finite dimension vector space 2 22/08/2022 Vector space 3 24/08/2022 Example of vector space 4 25/08/2022 Example of vector space and their properties 5 26/08/2022 Finite dimension 6 27/08/2022 Linear transformation 7 29/08/2022 Gaussian elimination method 8 30/08/2022 CSIR NET Exam and Syllabus 9 31/08/2022 Gaussian elimination method 10 01/09/2022 Example of gaussian elimination method 11 02/09/2022 RREF Form 12 03/09/2022 Eigen value and eigen vector 13 05/09/2022 Eigen vector 14 06/09/2022 Diagonalization 15 07/09/2022 Diagonalization 16 10/09/2022 Minimal polynomial 17 12/09/2022 Minimal polynomial 18 13/09/2022 Matrix representation of linear transformation 19 15/09/2022 Example of matrix representation of linear transformation 20 16/09/2022 Similar matrices 21 19/09/2022 Invariant subspace 22 21/09/2022 Theorem of invariant subspace 23 22/09/2022 Generalised eigenvector 24 23/09/2022 Generalised eigenspace 25 24/09/2022 Generalised eigenspace is invariant 26 27/09/2022 Theorem of invariant subspace 27 28/09/2022 Nilpotent transformation 28 28/09/2022 Jordan canonical form 29 10/10/2022 Example of jordan canonical form 30 11/10/2022 Primary decomposition theorem (statement) 31 12/10/2022 Primary decomposition theorem (proof) 32 13/10/2022 Rational canonical form 33 14/10/2022 Example of Rational canonical form 34 15/10/2022 Example of jordan canonical form 35 17/10/2022 Inner product space 36 18/10/2022 Projection 37 02/11/2022 Inner product 38 03/11/2022 Example of inner product 39 11/11/2022 Projection 40 12/11/2022 Example fo projection 41 14/11/2022 Norm 42 15/11/2022 Example of inner product 43 17/11/2022 Gaussian elimination method 44 30/11/2022 Assignment problems 45 28/11/2022 Assignment problems 46 05/12/2022 Hermition martix 47 07/12/2022 Skew- hermition matrix 48 09/12/2022 Unitary matrix 49 10/12/2022 Self adjoint operators 50 13/12/2022 Gram schmidt orthogonalization process 51 14/12/2022 Example of gram schmidt orthogonal 52 15/12/2022 Example of gram gram schmidt 53 16/12/2022 Bilinear form or transformation 54 17/12/2022 Algebra of bilinear 55 20/12/2022 Theorem :- the set of all bilinear form over a vector space v, form a vector space 56 26/12/2022 Privious class theorem continue 57 23/12/2022 Example of bilinear form 58 27/12/2022 Matrix of bilinear form","title":"Progress Report"},{"location":"linear-algebra/assignments/","text":"Assignments \u00b6 As a part of continuous assesment you have to submit the assignment S. No. Donwload Link Assignment 1 Download Assignment 2 Download Assignment 3 Download","title":"Assignment"},{"location":"linear-algebra/assignments/#assignments","text":"As a part of continuous assesment you have to submit the assignment S. No. Donwload Link Assignment 1 Download Assignment 2 Download Assignment 3 Download","title":"Assignments"},{"location":"linear-algebra/exam/","text":"Exams \u00b6 The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assesment that belongs to attendence, seminar and assignments. Unit I Gaussian Elimination (Problems) Matrix of Linear Transformation (Theorem + Proof + Problems) Unit II Hermitian, Skew Hermitian and Unitary Matrix (Definition + Examples + Related Theorems) Inner Product Space (Definition + Problems) Gram-Schmidt Orthogonalization (Theorem + Problems) Self-adjoint operators Unit III Similar Matrices (Definition + Problems) Invariant Subspace (Definition + Problems + Related Theorems) Triangulizaton (Defintion + Condition of Trinagulization) Nilpotent Transformation (Defintion + Example) Primary Decomposition Theorem (Statement + Proof + Problems) Jordan Form of Matrix (Problems) Rational Form of Matrix (Problems) Unit IV Bilinear Form (Defintion + Problems) Algebra of bilinear forms (Statement + Proof) Degenerate and Non-degenerate bilinear forms (Defition + Problems) Alternating Forms (Defition + Problems) Unit V Symmetric and Skew-Symmetric bilinear forms (Definition + Problems + Related Theorems) Quadratic Form (Defintion + Problems) Sylvester's Theorem (Statement + Proof + Problems) Invariants of quadratic forms (Defintion + Problems) 1. Internal Exam \u00b6 To download the question of last internal exam click here . 2. Final Exam \u00b6 Final exam divided in three groups. The questions are organized in three groups as follows: Group No of Questions Marks per Question Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"Exam"},{"location":"linear-algebra/exam/#exams","text":"The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assesment that belongs to attendence, seminar and assignments. Unit I Gaussian Elimination (Problems) Matrix of Linear Transformation (Theorem + Proof + Problems) Unit II Hermitian, Skew Hermitian and Unitary Matrix (Definition + Examples + Related Theorems) Inner Product Space (Definition + Problems) Gram-Schmidt Orthogonalization (Theorem + Problems) Self-adjoint operators Unit III Similar Matrices (Definition + Problems) Invariant Subspace (Definition + Problems + Related Theorems) Triangulizaton (Defintion + Condition of Trinagulization) Nilpotent Transformation (Defintion + Example) Primary Decomposition Theorem (Statement + Proof + Problems) Jordan Form of Matrix (Problems) Rational Form of Matrix (Problems) Unit IV Bilinear Form (Defintion + Problems) Algebra of bilinear forms (Statement + Proof) Degenerate and Non-degenerate bilinear forms (Defition + Problems) Alternating Forms (Defition + Problems) Unit V Symmetric and Skew-Symmetric bilinear forms (Definition + Problems + Related Theorems) Quadratic Form (Defintion + Problems) Sylvester's Theorem (Statement + Proof + Problems) Invariants of quadratic forms (Defintion + Problems)","title":"Exams"},{"location":"linear-algebra/exam/#1-internal-exam","text":"To download the question of last internal exam click here .","title":"1. Internal Exam"},{"location":"linear-algebra/exam/#2-final-exam","text":"Final exam divided in three groups. The questions are organized in three groups as follows: Group No of Questions Marks per Question Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"2. Final Exam"},{"location":"linear-algebra/introduction/","text":"Welcome to linear algebra course \u00b6 This page is dedicated to the course of linear algebra taught in the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur. 1. Syllabus \u00b6 System of linear equation Matrix of Linear Transformation Change of Basis Minimal Polynomials Similarity of Linear Transformation Invariant Subspace Nilpotent Transformation Primary Decomposition Theorem Rational Forms Jordan Canonical Form Inner Product Spaces Gram-Schmidt Orthogonalization Self-adjoint Operators Bilinear Forms Quadratic Forms Sylvester's law of inertia 2. Course Objectives \u00b6 The course linear algebra focussed on the study of properties of complex functions. This is the third course on linear algebra in TMBU, Bhagalpur. The first course mainly introduce the concept of basic matrix theory, while second course discusses the theory of abstract vector space. In this course we learn the connection between these two and use the best of two worlds. Finte dimensional abstract vector space can be thought as \\(\\mathbb{R}^n\\) with the help of an ordered basis. We can realize the linear transformation as matrices, i.e., linar transformation between two Eulidean space, when basis of both spaces are fixed. Canonical Forms: Since the matrix of linear transformation is depends on the basis, here we learn how to find the basis such that, the matrix of linear transfomation is simple. 3. References \u00b6 Linear Algebra by Friedberg, Insel and Spence Linear Algebra by Hoffman and Kunze Download this Free Book 4. Routine \u00b6 Weekday 1 st Period 2 nd Period 3 rd Period 4 th Period 5 th Period MON LA TUE LA WED THR LA FRI LA SAT LA 5. Instructor \u00b6 Sandeep Suman , Assistant Professor, TMBU, Bhagalpur","title":"Course Overview"},{"location":"linear-algebra/introduction/#welcome-to-linear-algebra-course","text":"This page is dedicated to the course of linear algebra taught in the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur.","title":"Welcome to linear algebra course"},{"location":"linear-algebra/introduction/#1-syllabus","text":"System of linear equation Matrix of Linear Transformation Change of Basis Minimal Polynomials Similarity of Linear Transformation Invariant Subspace Nilpotent Transformation Primary Decomposition Theorem Rational Forms Jordan Canonical Form Inner Product Spaces Gram-Schmidt Orthogonalization Self-adjoint Operators Bilinear Forms Quadratic Forms Sylvester's law of inertia","title":"1. Syllabus"},{"location":"linear-algebra/introduction/#2-course-objectives","text":"The course linear algebra focussed on the study of properties of complex functions. This is the third course on linear algebra in TMBU, Bhagalpur. The first course mainly introduce the concept of basic matrix theory, while second course discusses the theory of abstract vector space. In this course we learn the connection between these two and use the best of two worlds. Finte dimensional abstract vector space can be thought as \\(\\mathbb{R}^n\\) with the help of an ordered basis. We can realize the linear transformation as matrices, i.e., linar transformation between two Eulidean space, when basis of both spaces are fixed. Canonical Forms: Since the matrix of linear transformation is depends on the basis, here we learn how to find the basis such that, the matrix of linear transfomation is simple.","title":"2. Course Objectives"},{"location":"linear-algebra/introduction/#3-references","text":"Linear Algebra by Friedberg, Insel and Spence Linear Algebra by Hoffman and Kunze Download this Free Book","title":"3. References"},{"location":"linear-algebra/introduction/#4-routine","text":"Weekday 1 st Period 2 nd Period 3 rd Period 4 th Period 5 th Period MON LA TUE LA WED THR LA FRI LA SAT LA","title":"4. Routine"},{"location":"linear-algebra/introduction/#5-instructor","text":"Sandeep Suman , Assistant Professor, TMBU, Bhagalpur","title":"5. Instructor"},{"location":"linear-algebra/linear-equations/","text":"Gaussian Elimination \u00b6 The idea of Gaussian elimination is to convert a system of linear equation into an equivalent system using elementary operations, such that, new system is easy to solve. In previous classes we have seen many method of solving system of linear equation. \\(i.e.,\\) Hit and Trial Method Substitution Method Elimination Cramer's Rule Gaussian elimination is a prominent method to solve any system of linear equation. Step 1: Write out the augmented matrix \u00b6 A system of linear equation is generally of the form \\[\\begin{align}\\newcommand{\\x}{\\bf{x}}\\newcommand{\\bb}{\\bf{b}} A \\x = \\bb \\label{eq:linear}\\quad\\tag{1} \\end{align}\\] where \\(A \\in M(n \\times m)\\) and \\(\\newcommand{\\R}{\\mathbb{R}}\\bb \\in \\R^n\\) are given, and \\(\\x=(x_1,\\dots, x_m)^T\\) is the vector of unknowns. For example, the system \\[\\begin{align*} x_2 + 2 \\, x_3 - x_4 & = 1 \\\\ x_1 + x_3 + x_4 & = 4 \\\\ -x_1 + x_2 - x_4 & = 2 \\\\ 2 \\, x_2 + 3 \\, x_3 - x_4 & = 7 \\end{align*}\\] can be written in the form \\eqref{eq:linear} with \\[\\begin{equation*} A = \\begin{pmatrix} 0 & 1 & 2 & -1 \\\\ 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 2 & 3 & -1 \\end{pmatrix} \\,, \\qquad \\bb = \\begin{pmatrix} 1 \\\\ 4 \\\\ 2 \\\\ 7 \\end{pmatrix} \\,. \\end{equation*}\\] To simplify notation, we write \\(A\\) and \\(\\bb\\) into a single augmented matrix , \\[\\begin{equation} \\tilde{A} = \\left( \\begin{matrix} 0 & 1 & 2 & -1 \\\\ 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 2 & 3 & -1 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 1 \\\\ 4 \\\\ 2 \\\\ 7 \\end{matrix} \\right)\\right. \\,. \\label{e.m}\\tag{2} \\end{equation}\\] Step 2: Bring \\(\\tilde{A}\\) into reduced row echelon form \u00b6 The goal of this step is to bring the augmented matrix into reduced row echelon form . A matrix is in this form if the first non-zero entry of each row is \\(1\\) , this element is referred to as the \\emph{pivot}, each pivot is the only non-zero entry in its column, each row has at least as many leading zeros as the previous r * For example, the following matrix is in row echelon form, where \\(*\\) could be any, possibly non-zero, number: \\[\\begin{equation*} \\begin{pmatrix} 0 & 1 & * & 0 & * & * & 0 \\\\ 0 & 0 & 0 & 1 & * & * & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ \\end{pmatrix} \\end{equation*}\\] Three types of elementary row operations are permitted in this process, namely exchanging two rows of \\(\\tilde{A}\\) , multiplying a row by a non-zero scalar, adding a multiple of one row to another row. As an example, we row-reduce the augmented matrix \\eqref{e.m}: \\[\\begin{align*} & \\left( \\begin{matrix} 0 & 1 & 2 & -1 \\\\ 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 2 & 3 & -1 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 1 \\\\ 4 \\\\ 2 \\\\ 7 \\end{matrix} \\right)\\right. \\xrightarrow{\\text{reorder rows}} \\left( \\begin{matrix} 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 1 & 2 & -1 \\\\ 0 & 2 & 3 & -1 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 4 \\\\ 2 \\\\ 1 \\\\ 7 \\end{matrix} \\right)\\right. \\xrightarrow{\\text{R1}+\\text{R2}\\to\\text{R2}} \\\\ & \\left( \\begin{matrix} 1 & 0 & 1 & 1 \\\\ 0 & 1 & 1 & 0 \\\\ 0 & 1 & 2 & -1 \\\\ 0 & 2 & 3 & -1 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 4 \\\\ 6 \\\\ 1 \\\\ 7 \\end{matrix} \\right)\\right. \\xrightarrow{\\substack{\\text{R3}-\\text{R2}\\to\\text{R3} \\\\ \\text{R4}-2\\,\\text{R2}\\to\\text{R4}}} \\left( \\begin{matrix} 1 & 0 & 1 & 1 \\\\ 0 & 1 & 1 & 0 \\\\ 0 & 0 & 1 & -1 \\\\ 0 & 0 & 1 & -1 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 4 \\\\ 6 \\\\ -5 \\\\ -5 \\end{matrix} \\right)\\right. \\xrightarrow{\\text{R4}-\\text{R3}\\to\\text{R4}} \\\\ & \\left( \\begin{matrix} 1 & 0 & 1 & 1 \\\\ 0 & 1 & 1 & 0 \\\\ 0 & 0 & 1 & -1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 4 \\\\ 6 \\\\ -5 \\\\ 0 \\end{matrix} \\right)\\right. \\xrightarrow{\\substack{\\text{R1}-\\text{R3}\\to\\text{R1}\\\\ \\text{R2}-\\text{R3}\\to\\text{R2}}} \\left( \\begin{matrix} 1 & 0 & 0 & 2 \\\\ 0 & 1 & 0 & 1 \\\\ 0 & 0 & 1 & -1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 9 \\\\ 11 \\\\ -5 \\\\ 0 \\end{matrix} \\right)\\right. \\end{align*}\\] Step 3: Zero, one, or many solutions? \u00b6 There are two fundamentally different situations: The matrix \\(A\\) is regular . In this case, the left-hand block of \\(\\tilde{A}\\) has been reduced to the identity matrix. There is exactly one solution, independent of which vector \\(\\bb\\) you started out with. The matrix \\(A\\) is degenerate . In this case, the left-hand block of the row-reduced augmented matrix has more columns than non-zero rows. Then, dependent on which vector \\(\\bb\\) you started out with, there is either no solution at all (the system is inconsistent ), or an infinite number of solutions (the system is underdetermined ). If the rightmost column of the row-reduced augmented matrix has a nonzero entry in a row that is otherwise zero, the system is inconsistent. Otherwise, the general solution has the following structure. It is the sum of a particular solution of the inhomogeneous equation \\(A\\x=\\bb\\) and the general solution of the homogeneous equation \\(A\\x=0\\) . Step 4: Write out the solution \u00b6 If the left-hand block of the row-reduced matrix is not square, make it square by adding or removing rows of zeros. This has to be done in such a way that the leading \\(1\\) in each row (the \\emph{pivot}) lies on the diagonal! The rightmost column of the row-reduced augmented matrix is a particular solution. To find a basis for the general solution of the homogeneous system, proceed as follows: Take every column of the row-reduced augmented matrix that has a zero on the diagonal. Replace that zero by \\(-1\\) . The set of these column vectors is the basis you need. In the example above, a particular solution is \\((9, 11, -5, 0)^T\\) and the general solution of the homogeneous equation is a one-dimensional subspace with basis vector \\((2,1,-1,-1)^T\\) . Therefore, the general solution to the inhomogeneous equation \\(A\\x=\\bb\\) is the line \\[\\begin{equation*} \\x = \\begin{pmatrix} 9 \\\\ 11 \\\\ -5 \\\\ 0 \\end{pmatrix} + \\lambda \\begin{pmatrix} 2 \\\\ 1 \\\\ -1 \\\\ -1 \\end{pmatrix} \\,. \\end{equation*}\\] Another example: Assume that the row-reduced matrix is \\[\\begin{equation*} \\left( \\begin{matrix} 0 & 0 & 1 & -3 & 0 & 4\\\\ 0 & 0 & 0 & 0 & 1 & 6 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} -3 \\\\ 7 \\end{matrix} \\right)\\right.\\,. \\end{equation*}\\] Padding the matrix with the required rows of zeros gives \\[\\begin{equation*} \\left( \\begin{matrix} 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 1 & -3 & 0 & 4\\\\ 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 1 & 6 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 0 \\\\ 0 \\\\ -3 \\\\ 0 \\\\ 7 \\\\ 0 \\end{matrix} \\right)\\right.\\,, \\end{equation*}\\] and the general solution is \\[\\begin{equation*} \\x = \\begin{pmatrix} 0 \\\\ 0 \\\\ -3 \\\\ 0 \\\\ 7 \\\\ 0 \\end{pmatrix} + \\lambda_1 \\begin{pmatrix} -1 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\end{pmatrix} + \\lambda_2 \\begin{pmatrix} 0 \\\\ -1 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\end{pmatrix} + \\lambda_3 \\begin{pmatrix} 0 \\\\ 0 \\\\ -3 \\\\ -1 \\\\ 0 \\\\ 0 \\end{pmatrix} + \\lambda_4 \\begin{pmatrix} 0 \\\\ 0 \\\\ 4 \\\\ 0 \\\\ 6 \\\\ -1 \\end{pmatrix} \\,. \\end{equation*}\\] Step 5: Check your solution \u00b6 By multiplying \\(A\\) with the vectors representing the solution, you can easily verify that the computation is correct. In our example, \\[\\begin{align*} A \\begin{pmatrix} 9 \\\\ 11 \\\\ -5 \\\\ 0 \\end{pmatrix} &= \\begin{pmatrix} 0 & 1 & 2 & -1 \\\\ 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 2 & 3 & -1 \\end{pmatrix} \\begin{pmatrix} 9 \\\\ 11 \\\\ -5 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 4 \\\\ 2 \\\\ 7 \\end{pmatrix} =\\bb \\,, \\\\ A \\begin{pmatrix} 2 \\\\ 1 \\\\ -1 \\\\ -1 \\end{pmatrix} &= \\begin{pmatrix} 0 & 1 & 2 & -1 \\\\ 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 2 & 3 & -1 \\end{pmatrix} \\begin{pmatrix} 2 \\\\ 1 \\\\ -1 \\\\ -1 \\end{pmatrix} = \\begin{pmatrix} 0\\\\0\\\\0\\\\0 \\end{pmatrix} \\,. \\end{align*}\\] After watching this you can try question 1 from assignment 1 .","title":"Linear Equations"},{"location":"linear-algebra/linear-equations/#gaussian-elimination","text":"The idea of Gaussian elimination is to convert a system of linear equation into an equivalent system using elementary operations, such that, new system is easy to solve. In previous classes we have seen many method of solving system of linear equation. \\(i.e.,\\) Hit and Trial Method Substitution Method Elimination Cramer's Rule Gaussian elimination is a prominent method to solve any system of linear equation.","title":"Gaussian Elimination"},{"location":"linear-algebra/linear-equations/#step-1-write-out-the-augmented-matrix","text":"A system of linear equation is generally of the form \\[\\begin{align}\\newcommand{\\x}{\\bf{x}}\\newcommand{\\bb}{\\bf{b}} A \\x = \\bb \\label{eq:linear}\\quad\\tag{1} \\end{align}\\] where \\(A \\in M(n \\times m)\\) and \\(\\newcommand{\\R}{\\mathbb{R}}\\bb \\in \\R^n\\) are given, and \\(\\x=(x_1,\\dots, x_m)^T\\) is the vector of unknowns. For example, the system \\[\\begin{align*} x_2 + 2 \\, x_3 - x_4 & = 1 \\\\ x_1 + x_3 + x_4 & = 4 \\\\ -x_1 + x_2 - x_4 & = 2 \\\\ 2 \\, x_2 + 3 \\, x_3 - x_4 & = 7 \\end{align*}\\] can be written in the form \\eqref{eq:linear} with \\[\\begin{equation*} A = \\begin{pmatrix} 0 & 1 & 2 & -1 \\\\ 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 2 & 3 & -1 \\end{pmatrix} \\,, \\qquad \\bb = \\begin{pmatrix} 1 \\\\ 4 \\\\ 2 \\\\ 7 \\end{pmatrix} \\,. \\end{equation*}\\] To simplify notation, we write \\(A\\) and \\(\\bb\\) into a single augmented matrix , \\[\\begin{equation} \\tilde{A} = \\left( \\begin{matrix} 0 & 1 & 2 & -1 \\\\ 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 2 & 3 & -1 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 1 \\\\ 4 \\\\ 2 \\\\ 7 \\end{matrix} \\right)\\right. \\,. \\label{e.m}\\tag{2} \\end{equation}\\]","title":"Step 1: Write out the augmented matrix"},{"location":"linear-algebra/linear-equations/#step-2-bring-tildea-into-reduced-row-echelon-form","text":"The goal of this step is to bring the augmented matrix into reduced row echelon form . A matrix is in this form if the first non-zero entry of each row is \\(1\\) , this element is referred to as the \\emph{pivot}, each pivot is the only non-zero entry in its column, each row has at least as many leading zeros as the previous r * For example, the following matrix is in row echelon form, where \\(*\\) could be any, possibly non-zero, number: \\[\\begin{equation*} \\begin{pmatrix} 0 & 1 & * & 0 & * & * & 0 \\\\ 0 & 0 & 0 & 1 & * & * & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ \\end{pmatrix} \\end{equation*}\\] Three types of elementary row operations are permitted in this process, namely exchanging two rows of \\(\\tilde{A}\\) , multiplying a row by a non-zero scalar, adding a multiple of one row to another row. As an example, we row-reduce the augmented matrix \\eqref{e.m}: \\[\\begin{align*} & \\left( \\begin{matrix} 0 & 1 & 2 & -1 \\\\ 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 2 & 3 & -1 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 1 \\\\ 4 \\\\ 2 \\\\ 7 \\end{matrix} \\right)\\right. \\xrightarrow{\\text{reorder rows}} \\left( \\begin{matrix} 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 1 & 2 & -1 \\\\ 0 & 2 & 3 & -1 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 4 \\\\ 2 \\\\ 1 \\\\ 7 \\end{matrix} \\right)\\right. \\xrightarrow{\\text{R1}+\\text{R2}\\to\\text{R2}} \\\\ & \\left( \\begin{matrix} 1 & 0 & 1 & 1 \\\\ 0 & 1 & 1 & 0 \\\\ 0 & 1 & 2 & -1 \\\\ 0 & 2 & 3 & -1 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 4 \\\\ 6 \\\\ 1 \\\\ 7 \\end{matrix} \\right)\\right. \\xrightarrow{\\substack{\\text{R3}-\\text{R2}\\to\\text{R3} \\\\ \\text{R4}-2\\,\\text{R2}\\to\\text{R4}}} \\left( \\begin{matrix} 1 & 0 & 1 & 1 \\\\ 0 & 1 & 1 & 0 \\\\ 0 & 0 & 1 & -1 \\\\ 0 & 0 & 1 & -1 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 4 \\\\ 6 \\\\ -5 \\\\ -5 \\end{matrix} \\right)\\right. \\xrightarrow{\\text{R4}-\\text{R3}\\to\\text{R4}} \\\\ & \\left( \\begin{matrix} 1 & 0 & 1 & 1 \\\\ 0 & 1 & 1 & 0 \\\\ 0 & 0 & 1 & -1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 4 \\\\ 6 \\\\ -5 \\\\ 0 \\end{matrix} \\right)\\right. \\xrightarrow{\\substack{\\text{R1}-\\text{R3}\\to\\text{R1}\\\\ \\text{R2}-\\text{R3}\\to\\text{R2}}} \\left( \\begin{matrix} 1 & 0 & 0 & 2 \\\\ 0 & 1 & 0 & 1 \\\\ 0 & 0 & 1 & -1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 9 \\\\ 11 \\\\ -5 \\\\ 0 \\end{matrix} \\right)\\right. \\end{align*}\\]","title":"Step 2: Bring \\(\\tilde{A}\\) into reduced row echelon form"},{"location":"linear-algebra/linear-equations/#step-3-zero-one-or-many-solutions","text":"There are two fundamentally different situations: The matrix \\(A\\) is regular . In this case, the left-hand block of \\(\\tilde{A}\\) has been reduced to the identity matrix. There is exactly one solution, independent of which vector \\(\\bb\\) you started out with. The matrix \\(A\\) is degenerate . In this case, the left-hand block of the row-reduced augmented matrix has more columns than non-zero rows. Then, dependent on which vector \\(\\bb\\) you started out with, there is either no solution at all (the system is inconsistent ), or an infinite number of solutions (the system is underdetermined ). If the rightmost column of the row-reduced augmented matrix has a nonzero entry in a row that is otherwise zero, the system is inconsistent. Otherwise, the general solution has the following structure. It is the sum of a particular solution of the inhomogeneous equation \\(A\\x=\\bb\\) and the general solution of the homogeneous equation \\(A\\x=0\\) .","title":"Step 3: Zero, one, or many solutions?"},{"location":"linear-algebra/linear-equations/#step-4-write-out-the-solution","text":"If the left-hand block of the row-reduced matrix is not square, make it square by adding or removing rows of zeros. This has to be done in such a way that the leading \\(1\\) in each row (the \\emph{pivot}) lies on the diagonal! The rightmost column of the row-reduced augmented matrix is a particular solution. To find a basis for the general solution of the homogeneous system, proceed as follows: Take every column of the row-reduced augmented matrix that has a zero on the diagonal. Replace that zero by \\(-1\\) . The set of these column vectors is the basis you need. In the example above, a particular solution is \\((9, 11, -5, 0)^T\\) and the general solution of the homogeneous equation is a one-dimensional subspace with basis vector \\((2,1,-1,-1)^T\\) . Therefore, the general solution to the inhomogeneous equation \\(A\\x=\\bb\\) is the line \\[\\begin{equation*} \\x = \\begin{pmatrix} 9 \\\\ 11 \\\\ -5 \\\\ 0 \\end{pmatrix} + \\lambda \\begin{pmatrix} 2 \\\\ 1 \\\\ -1 \\\\ -1 \\end{pmatrix} \\,. \\end{equation*}\\] Another example: Assume that the row-reduced matrix is \\[\\begin{equation*} \\left( \\begin{matrix} 0 & 0 & 1 & -3 & 0 & 4\\\\ 0 & 0 & 0 & 0 & 1 & 6 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} -3 \\\\ 7 \\end{matrix} \\right)\\right.\\,. \\end{equation*}\\] Padding the matrix with the required rows of zeros gives \\[\\begin{equation*} \\left( \\begin{matrix} 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 1 & -3 & 0 & 4\\\\ 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 1 & 6 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\end{matrix} \\right.\\left|\\left. \\begin{matrix} 0 \\\\ 0 \\\\ -3 \\\\ 0 \\\\ 7 \\\\ 0 \\end{matrix} \\right)\\right.\\,, \\end{equation*}\\] and the general solution is \\[\\begin{equation*} \\x = \\begin{pmatrix} 0 \\\\ 0 \\\\ -3 \\\\ 0 \\\\ 7 \\\\ 0 \\end{pmatrix} + \\lambda_1 \\begin{pmatrix} -1 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\end{pmatrix} + \\lambda_2 \\begin{pmatrix} 0 \\\\ -1 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\end{pmatrix} + \\lambda_3 \\begin{pmatrix} 0 \\\\ 0 \\\\ -3 \\\\ -1 \\\\ 0 \\\\ 0 \\end{pmatrix} + \\lambda_4 \\begin{pmatrix} 0 \\\\ 0 \\\\ 4 \\\\ 0 \\\\ 6 \\\\ -1 \\end{pmatrix} \\,. \\end{equation*}\\]","title":"Step 4: Write out the solution"},{"location":"linear-algebra/linear-equations/#step-5-check-your-solution","text":"By multiplying \\(A\\) with the vectors representing the solution, you can easily verify that the computation is correct. In our example, \\[\\begin{align*} A \\begin{pmatrix} 9 \\\\ 11 \\\\ -5 \\\\ 0 \\end{pmatrix} &= \\begin{pmatrix} 0 & 1 & 2 & -1 \\\\ 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 2 & 3 & -1 \\end{pmatrix} \\begin{pmatrix} 9 \\\\ 11 \\\\ -5 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 4 \\\\ 2 \\\\ 7 \\end{pmatrix} =\\bb \\,, \\\\ A \\begin{pmatrix} 2 \\\\ 1 \\\\ -1 \\\\ -1 \\end{pmatrix} &= \\begin{pmatrix} 0 & 1 & 2 & -1 \\\\ 1 & 0 & 1 & 1 \\\\ -1 & 1 & 0 & -1 \\\\ 0 & 2 & 3 & -1 \\end{pmatrix} \\begin{pmatrix} 2 \\\\ 1 \\\\ -1 \\\\ -1 \\end{pmatrix} = \\begin{pmatrix} 0\\\\0\\\\0\\\\0 \\end{pmatrix} \\,. \\end{align*}\\] After watching this you can try question 1 from assignment 1 .","title":"Step 5: Check your solution"},{"location":"linear-algebra/matrix-linear-transformation/","text":"Gaussian Elimination \u00b6 The idea of Gaussian elimination is to convert a system of linear equation into an equivalent system using elementary operations, such that, new system is easy to solve. After watching this you can try question 1 from assignment 1 .","title":"Matrix of Linear Transformation"},{"location":"linear-algebra/matrix-linear-transformation/#gaussian-elimination","text":"The idea of Gaussian elimination is to convert a system of linear equation into an equivalent system using elementary operations, such that, new system is easy to solve. After watching this you can try question 1 from assignment 1 .","title":"Gaussian Elimination"},{"location":"operation-research/assignments/","text":"Assignments \u00b6 As a part of continuous assessment you have to submit the assignment S. No. Donwload Link Due Date 1 Download 15/05/2019 2 3 4 5","title":"Assignments"},{"location":"operation-research/assignments/#assignments","text":"As a part of continuous assessment you have to submit the assignment S. No. Donwload Link Due Date 1 Download 15/05/2019 2 3 4 5","title":"Assignments"},{"location":"operation-research/basic-definitions/","text":"Basic Defintions of Game Theory \u00b6 Checkpoint #1: Which of the following situations can be modelled as a game Two student trying to solve an assignment as soon as possible Five students trying to solve their assignment in minimum time A number of students competing for rank 1 None of These Checkpoint #2: Which of the following is not true for a two person zero sum game Sum of their payoff is zero Two teams are playing cricket for fixed amount of money Both players can get non-negative payoff None of these","title":"Definitions"},{"location":"operation-research/basic-definitions/#basic-defintions-of-game-theory","text":"Checkpoint #1: Which of the following situations can be modelled as a game Two student trying to solve an assignment as soon as possible Five students trying to solve their assignment in minimum time A number of students competing for rank 1 None of These Checkpoint #2: Which of the following is not true for a two person zero sum game Sum of their payoff is zero Two teams are playing cricket for fixed amount of money Both players can get non-negative payoff None of these","title":"Basic Defintions of Game Theory"},{"location":"operation-research/dominant-strategy/","text":"Dominant Strategy \u00b6 Checkpoint #1: Which is true for dominant strategy Every game has a dominant strategy If a game has dominant strategy, then the size of game will reduced If a game has dominant strategy for player A, then the only strategy player A will use is the dominant strategy None of these","title":"Dominant Strategy"},{"location":"operation-research/dominant-strategy/#dominant-strategy","text":"Checkpoint #1: Which is true for dominant strategy Every game has a dominant strategy If a game has dominant strategy, then the size of game will reduced If a game has dominant strategy for player A, then the only strategy player A will use is the dominant strategy None of these","title":"Dominant Strategy"},{"location":"operation-research/equality-constraints/","text":"KKT Conditions \u00b6 Find the minimum (over \\(x\\) , \\(y\\) ) of the function \\(f(x,y)\\) , subject to \\(g(x,y)=0\\) , where \\[ \\begin{alignat*}{2} & \\text{minimize: } && 2 x^2 + 3 y^2 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x^2 + y^2 &= 4 \\end{aligned} \\end{alignat*} \\] 1. Step I \u00b6 Defining variable and functions $\\displaystyle f = 2 x^{2} + 3 y^{2}\\ g = x^{2} + y^{2} - 4 $ 2. Step II \u00b6 Defining lagrangian function. The lagrangian \\(L=- \\lambda \\left(x^{2} + y^{2} - 4\\right) + 2 x^{2} + 3 y^{2}\\) 3. Step III \u00b6 Deriving KKT equations \\(\\displaystyle - 2 \\lambda x + 4 x= 0 \\\\- 2 \\lambda y + 6 y= 0 \\\\x^{2} + y^{2} - 4= 0 \\\\\\) 4. Step IV \u00b6 Solving KKT Conditions to obtain necessary points \\(x\\) \\(y\\) \\(\\lambda\\) Obj \\(-2\\) \\(0\\) \\(2\\) \\(8\\) \\(2\\) \\(0\\) \\(2\\) \\(8\\) \\(0\\) \\(-2\\) \\(3\\) \\(12\\) \\(0\\) \\(2\\) \\(3\\) \\(12\\) 5. Step V \u00b6 Computing Bordered Hessian for each points \\(\\displaystyle \\bar{H} = \\left[\\begin{matrix}0 & 2 x & 2 y\\\\2 x & - 2 \\lambda + 4 & 0\\\\2 y & 0 & - 2 \\lambda + 6\\end{matrix}\\right]\\) 6. Step VI \u00b6 Determinant of the bordered hessian will provide maxima and minima. \\(x\\) \\(y\\) \\(\\lambda\\) Obj Bordered Hessian \\(-2\\) \\(0\\) \\(2\\) \\(8\\) \\(-32\\) \\(2\\) \\(0\\) \\(2\\) \\(8\\) \\(-32\\) \\(0\\) \\(-2\\) \\(3\\) \\(12\\) \\(32\\) \\(0\\) \\(2\\) \\(3\\) \\(12\\) \\(32\\) Conclusion: First two points are minima while third and forth points are maxima.","title":"Equality Constraints"},{"location":"operation-research/equality-constraints/#kkt-conditions","text":"Find the minimum (over \\(x\\) , \\(y\\) ) of the function \\(f(x,y)\\) , subject to \\(g(x,y)=0\\) , where \\[ \\begin{alignat*}{2} & \\text{minimize: } && 2 x^2 + 3 y^2 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x^2 + y^2 &= 4 \\end{aligned} \\end{alignat*} \\]","title":"KKT Conditions"},{"location":"operation-research/equality-constraints/#1-step-i","text":"Defining variable and functions $\\displaystyle f = 2 x^{2} + 3 y^{2}\\ g = x^{2} + y^{2} - 4 $","title":"1. Step I"},{"location":"operation-research/equality-constraints/#2-step-ii","text":"Defining lagrangian function. The lagrangian \\(L=- \\lambda \\left(x^{2} + y^{2} - 4\\right) + 2 x^{2} + 3 y^{2}\\)","title":"2. Step II"},{"location":"operation-research/equality-constraints/#3-step-iii","text":"Deriving KKT equations \\(\\displaystyle - 2 \\lambda x + 4 x= 0 \\\\- 2 \\lambda y + 6 y= 0 \\\\x^{2} + y^{2} - 4= 0 \\\\\\)","title":"3. Step III"},{"location":"operation-research/equality-constraints/#4-step-iv","text":"Solving KKT Conditions to obtain necessary points \\(x\\) \\(y\\) \\(\\lambda\\) Obj \\(-2\\) \\(0\\) \\(2\\) \\(8\\) \\(2\\) \\(0\\) \\(2\\) \\(8\\) \\(0\\) \\(-2\\) \\(3\\) \\(12\\) \\(0\\) \\(2\\) \\(3\\) \\(12\\)","title":"4. Step IV"},{"location":"operation-research/equality-constraints/#5-step-v","text":"Computing Bordered Hessian for each points \\(\\displaystyle \\bar{H} = \\left[\\begin{matrix}0 & 2 x & 2 y\\\\2 x & - 2 \\lambda + 4 & 0\\\\2 y & 0 & - 2 \\lambda + 6\\end{matrix}\\right]\\)","title":"5. Step V"},{"location":"operation-research/equality-constraints/#6-step-vi","text":"Determinant of the bordered hessian will provide maxima and minima. \\(x\\) \\(y\\) \\(\\lambda\\) Obj Bordered Hessian \\(-2\\) \\(0\\) \\(2\\) \\(8\\) \\(-32\\) \\(2\\) \\(0\\) \\(2\\) \\(8\\) \\(-32\\) \\(0\\) \\(-2\\) \\(3\\) \\(12\\) \\(32\\) \\(0\\) \\(2\\) \\(3\\) \\(12\\) \\(32\\) Conclusion: First two points are minima while third and forth points are maxima.","title":"6. Step VI"},{"location":"operation-research/exam/","text":"Exams \u00b6 The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assessment that belongs to attendance, seminar and assignments. Practice the following question for exams 1. Internal Exam \u00b6 Internal exam consist of 5 objectives and 3 descriptive questions, out of which you have to answer all objectives and 2 descriptive questions. 2. Final Exam \u00b6 Final exam divided in three groups. The questions are organized in three groups as follows: Group Questions Marks Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"Exam"},{"location":"operation-research/exam/#exams","text":"The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assessment that belongs to attendance, seminar and assignments. Practice the following question for exams","title":"Exams"},{"location":"operation-research/exam/#1-internal-exam","text":"Internal exam consist of 5 objectives and 3 descriptive questions, out of which you have to answer all objectives and 2 descriptive questions.","title":"1. Internal Exam"},{"location":"operation-research/exam/#2-final-exam","text":"Final exam divided in three groups. The questions are organized in three groups as follows: Group Questions Marks Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"2. Final Exam"},{"location":"operation-research/game/","text":"Introduction \u00b6 In this part of this course we will learn some game theory. Game theory is used to model conflicting situation in social and economic activity. In this course we will basically learn a special type of game that is called two person zero sum game .","title":"Introduction"},{"location":"operation-research/game/#introduction","text":"In this part of this course we will learn some game theory. Game theory is used to model conflicting situation in social and economic activity. In this course we will basically learn a special type of game that is called two person zero sum game .","title":"Introduction"},{"location":"operation-research/introduction/","text":"Welcome to operation research course \u00b6 This page is dedicated to the course of operaton research taught at the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur. 1. Syllabus \u00b6 Simplex Algorithm, Big-M, Two Phase Method Dual Simplex and other algorithm Transportation and Assignment Problems Game Theory Deterministic and Probabilistic Dynamic Programming Nonlinear Programming KKT Conditions 2. Objectives \u00b6 The course Operation Research focussed on the study of different kinds of optimization methods. First two unit is realted to linear programming and simplex method. Simplex Algorithm Big-M Two Phase Dual Simplex Algorithm Transportation Problem Assignment Problem Game Theory Dynamic Programming Two Persion Zero Sum Game Graphical Solution Game as LPP Nonlinear Programming KKT Conditions 3. References \u00b6 Operation Research by Hamady A. Taha 4. Routine \u00b6 Weekday 1 st Period 2 nd Period 3 rd Period 4 th Period 5 th Period MON CA TUE CA WED CA THR CA FRI CA SAT CA 5. Instructor \u00b6 Sandeep Suman , Assistant Professor, TMBU, Bhagalpur","title":"Course Introduction"},{"location":"operation-research/introduction/#welcome-to-operation-research-course","text":"This page is dedicated to the course of operaton research taught at the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur.","title":"Welcome to operation research course"},{"location":"operation-research/introduction/#1-syllabus","text":"Simplex Algorithm, Big-M, Two Phase Method Dual Simplex and other algorithm Transportation and Assignment Problems Game Theory Deterministic and Probabilistic Dynamic Programming Nonlinear Programming KKT Conditions","title":"1. Syllabus"},{"location":"operation-research/introduction/#2-objectives","text":"The course Operation Research focussed on the study of different kinds of optimization methods. First two unit is realted to linear programming and simplex method. Simplex Algorithm Big-M Two Phase Dual Simplex Algorithm Transportation Problem Assignment Problem Game Theory Dynamic Programming Two Persion Zero Sum Game Graphical Solution Game as LPP Nonlinear Programming KKT Conditions","title":"2. Objectives"},{"location":"operation-research/introduction/#3-references","text":"Operation Research by Hamady A. Taha","title":"3. References"},{"location":"operation-research/introduction/#4-routine","text":"Weekday 1 st Period 2 nd Period 3 rd Period 4 th Period 5 th Period MON CA TUE CA WED CA THR CA FRI CA SAT CA","title":"4. Routine"},{"location":"operation-research/introduction/#5-instructor","text":"Sandeep Suman , Assistant Professor, TMBU, Bhagalpur","title":"5. Instructor"},{"location":"operation-research/kkt/","text":"Solve the following optimization problem $$ \\begin{alignat*}{2} & \\text{minimize: } && xy \\ & \\text{subject to: } && \\begin{aligned}[t] x+2y &\\leq 8\\ \\dfrac{x^2}{16}+1 &\\leq y \\ x &\\geq 0 \\ 0 \\leq y &\\leq 3 \\end{aligned} \\end{alignat*} $$ We can see that the constraint \\(y\\geq 0\\) is not active. So we don't have to include this constraint in our solution. Case I \u00b6 First we search for critical points in the interior of the region. $\\displaystyle f = x y\\ g_1 = - y + 3\\ g_2 = - x - 2 y + 8\\ g_3 = - \\frac{x^{2}}{16} + y - 1\\ g_4 = x $ The lagrangian \\(L=\\lambda_{1} \\left(- y + 3\\right) + \\lambda_{2} \\left(- x - 2 y + 8\\right) + \\lambda_{3} \\left(- \\frac{x^{2}}{16} + y - 1\\right) + \\lambda_{4} x + x y\\) \\(\\displaystyle - \\lambda_{2} - \\frac{\\lambda_{3} x}{8} + \\lambda_{4} + y= 0 \\\\- \\lambda_{1} - 2 \\lambda_{2} + \\lambda_{3} + x= 0 \\\\\\lambda_{1} \\left(- y + 3\\right)= 0 \\\\\\lambda_{2} \\left(- x - 2 y + 8\\right)= 0 \\\\\\lambda_{3} \\left(- \\frac{x^{2}}{16} + y - 1\\right)= 0 \\\\\\lambda_{4} x= 0 \\\\\\) \\(x\\) \\(y\\) \\(\\lambda_{1}\\) \\(\\lambda_{2}\\) \\(\\lambda_{3}\\) \\(\\lambda_{4}\\) Obj \\(0\\) \\(4\\) \\(0\\) \\(0\\) \\(0\\) \\(-4\\) \\(0\\) \\(0\\) \\(3\\) \\(0\\) \\(0\\) \\(0\\) \\(-3\\) \\(0\\) \\(0\\) \\(1\\) \\(0\\) \\(0\\) \\(0\\) \\(-1\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\)","title":"Kkt"},{"location":"operation-research/kkt/#case-i","text":"First we search for critical points in the interior of the region. $\\displaystyle f = x y\\ g_1 = - y + 3\\ g_2 = - x - 2 y + 8\\ g_3 = - \\frac{x^{2}}{16} + y - 1\\ g_4 = x $ The lagrangian \\(L=\\lambda_{1} \\left(- y + 3\\right) + \\lambda_{2} \\left(- x - 2 y + 8\\right) + \\lambda_{3} \\left(- \\frac{x^{2}}{16} + y - 1\\right) + \\lambda_{4} x + x y\\) \\(\\displaystyle - \\lambda_{2} - \\frac{\\lambda_{3} x}{8} + \\lambda_{4} + y= 0 \\\\- \\lambda_{1} - 2 \\lambda_{2} + \\lambda_{3} + x= 0 \\\\\\lambda_{1} \\left(- y + 3\\right)= 0 \\\\\\lambda_{2} \\left(- x - 2 y + 8\\right)= 0 \\\\\\lambda_{3} \\left(- \\frac{x^{2}}{16} + y - 1\\right)= 0 \\\\\\lambda_{4} x= 0 \\\\\\) \\(x\\) \\(y\\) \\(\\lambda_{1}\\) \\(\\lambda_{2}\\) \\(\\lambda_{3}\\) \\(\\lambda_{4}\\) Obj \\(0\\) \\(4\\) \\(0\\) \\(0\\) \\(0\\) \\(-4\\) \\(0\\) \\(0\\) \\(3\\) \\(0\\) \\(0\\) \\(0\\) \\(-3\\) \\(0\\) \\(0\\) \\(1\\) \\(0\\) \\(0\\) \\(0\\) \\(-1\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\)","title":"Case I"},{"location":"operation-research/kkt1/","text":"Solve the following optimization problem $$ \\begin{alignat*}{2} & \\text{maximize: } && xy \\ & \\text{subject to: } && \\begin{aligned}[t] x+y^2 &\\leq 2\\ x,y &\\geq 0 \\end{aligned} \\end{alignat*} $$ Step I \u00b6 We try to draw the feasible region. 1. Step II \u00b6 Defining variable and functions. $\\displaystyle f = x y\\ g_1 = - x - y^{2} + 2\\ g_2 = y\\ g_3 = x $ 2. Step III \u00b6 Forming the Lagrangian. The lagrangian \\(L=\\lambda_{1} \\left(- x - y^{2} + 2\\right) + \\lambda_{2} y + \\lambda_{3} x + \\lambda_{4} x + x y\\) 3. Step IV \u00b6 We will find the KKT equations, here we first solve only equalities. Later we use inequalities to remove extra points. \\(\\displaystyle - \\lambda_{1} + \\lambda_{3} + y= 0 \\\\- 2 \\lambda_{1} y + \\lambda_{2} + x= 0 \\\\\\lambda_{1} \\left(- x - y^{2} + 2\\right)= 0 \\\\\\lambda_{2} y= 0 \\\\\\lambda_{3} x= 0 \\\\\\) \\(x\\) \\(y\\) \\(\\lambda_{1}\\) \\(\\lambda_{2}\\) \\(\\lambda_{3}\\) Obj \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(\\frac{4}{3}\\) \\(- \\frac{\\sqrt{6}}{3}\\) \\(- \\frac{\\sqrt{6}}{3}\\) \\(0\\) \\(0\\) \\(- \\frac{4 \\sqrt{6}}{9}\\) \\(\\frac{4}{3}\\) \\(\\frac{\\sqrt{6}}{3}\\) \\(\\frac{\\sqrt{6}}{3}\\) \\(0\\) \\(0\\) \\(\\frac{4 \\sqrt{6}}{9}\\) Conclusion: Since \\(\\lambda\\) 's must be nonnegative, hence we have to discard the second point. As both the point lies in the feasible region, they are local maxima, but the second point is global maxima.","title":"KKT Conditions"},{"location":"operation-research/kkt1/#step-i","text":"We try to draw the feasible region.","title":"Step I"},{"location":"operation-research/kkt1/#1-step-ii","text":"Defining variable and functions. $\\displaystyle f = x y\\ g_1 = - x - y^{2} + 2\\ g_2 = y\\ g_3 = x $","title":"1. Step II"},{"location":"operation-research/kkt1/#2-step-iii","text":"Forming the Lagrangian. The lagrangian \\(L=\\lambda_{1} \\left(- x - y^{2} + 2\\right) + \\lambda_{2} y + \\lambda_{3} x + \\lambda_{4} x + x y\\)","title":"2. Step III"},{"location":"operation-research/kkt1/#3-step-iv","text":"We will find the KKT equations, here we first solve only equalities. Later we use inequalities to remove extra points. \\(\\displaystyle - \\lambda_{1} + \\lambda_{3} + y= 0 \\\\- 2 \\lambda_{1} y + \\lambda_{2} + x= 0 \\\\\\lambda_{1} \\left(- x - y^{2} + 2\\right)= 0 \\\\\\lambda_{2} y= 0 \\\\\\lambda_{3} x= 0 \\\\\\) \\(x\\) \\(y\\) \\(\\lambda_{1}\\) \\(\\lambda_{2}\\) \\(\\lambda_{3}\\) Obj \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(\\frac{4}{3}\\) \\(- \\frac{\\sqrt{6}}{3}\\) \\(- \\frac{\\sqrt{6}}{3}\\) \\(0\\) \\(0\\) \\(- \\frac{4 \\sqrt{6}}{9}\\) \\(\\frac{4}{3}\\) \\(\\frac{\\sqrt{6}}{3}\\) \\(\\frac{\\sqrt{6}}{3}\\) \\(0\\) \\(0\\) \\(\\frac{4 \\sqrt{6}}{9}\\) Conclusion: Since \\(\\lambda\\) 's must be nonnegative, hence we have to discard the second point. As both the point lies in the feasible region, they are local maxima, but the second point is global maxima.","title":"3. Step IV"},{"location":"operation-research/maximin-strategy/","text":"Maximin and Minimax Strategy \u00b6 Checkpoint #1: Which is not true for maximin strategy? In is based on pessimistic thinking, \\(i.e.\\) , thinking about the least risk. If the payoff matrix is given for player \\(A\\) , the maximin strategy is used by player \\(A\\) . If the payoff matrix is given for player \\(A\\) , the maximin strategy is used by player \\(B\\) . Maximin and minimax strategy are based on the same approach by player \\(A\\) and \\(B\\) respectively. Checkpoint #2: If the payoff matrix is given for player \\(A\\) , then which of the following is true for maximin strategy? It gives a lower bount for the game. It gives a upper bound for the game. The maximin strategy is used by player \\(B\\) . None of these.","title":"Maximin Strategy"},{"location":"operation-research/maximin-strategy/#maximin-and-minimax-strategy","text":"Checkpoint #1: Which is not true for maximin strategy? In is based on pessimistic thinking, \\(i.e.\\) , thinking about the least risk. If the payoff matrix is given for player \\(A\\) , the maximin strategy is used by player \\(A\\) . If the payoff matrix is given for player \\(A\\) , the maximin strategy is used by player \\(B\\) . Maximin and minimax strategy are based on the same approach by player \\(A\\) and \\(B\\) respectively. Checkpoint #2: If the payoff matrix is given for player \\(A\\) , then which of the following is true for maximin strategy? It gives a lower bount for the game. It gives a upper bound for the game. The maximin strategy is used by player \\(B\\) . None of these.","title":"Maximin and Minimax Strategy"},{"location":"operation-research/scipy/","text":"The main method to solve linear programming problem in python is given by the following command scipy . optimize . linprog ( c , A_ub = None , b_ub = None , A_eq = None , b_eq = None , bounds = None , method = 'revised simplex' , callback = None , options = None , x0 = None ) Where the value of each argument is given by comparing the linear programming with the following linear programn \\[ \\begin{alignat*}{2} & \\text{minimize: } && c^T x \\\\ & \\text{subject to: } && \\begin{aligned}[t] A_{ub}x &\\leq b_{ub} \\\\ A_{eq}x &= b_{eq} \\\\ l\\leq x &\\leq u \\end{aligned} \\end{alignat*} \\] Example \u00b6 c = [ - 1 , 4 ] A = [[ - 3 , 1 ], [ 1 , 2 ]] b = [ 6 , 4 ] x0_bounds = ( None , None ) x1_bounds = ( - 3 , None ) res = linprog ( c , A_ub = A , b_ub = b , bounds = [ x0_bounds , x1_bounds ], method = 'simplex' ) message : The problem is unbounded . ( HiGHS Status 10 : model_status is Unbounded ; primal_status is At upper bound ) success : False status : 3 fun : None x : None nit : 3 lower : residual : None marginals : None upper : residual : None marginals : None eqlin : residual : None marginals : None ineqlin : residual : None marginals : None 1. Example 1.a \u00b6 Now let's try to solve the following problem from the assignment \\[\\begin{alignat*}{2} & \\text{minimize: } && x_1 - 2x_2 - 4x_3 + 2x_4 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x_1 - 2x_3 &\\leq 4 \\\\ x_2 - x_4 &\\leq 8 \\\\ -2x_1 + x_2 + 8x_3 + x_4 &\\leq 12 \\\\ x_1,x_2,x_3,x_4 &\\geq 0 \\end{aligned} \\end{alignat*}\\] We have to use the following command to solve this problem message: Optimization terminated successfully. (HiGHS Status 7: Optimal) success: True status: 0 fun: -18.0 x: [ 0.000e+00 8.000e+00 5.000e-01 0.000e+00] nit: 4 lower: residual: [ 0.000e+00 8.000e+00 5.000e-01 0.000e+00] marginals: [ 0.000e+00 0.000e+00 0.000e+00 1.000e+00] upper: residual: [ inf inf inf inf] marginals: [ 0.000e+00 0.000e+00 0.000e+00 0.000e+00] eqlin: residual: [] marginals: [] ineqlin: residual: [ 5.000e+00 0.000e+00 0.000e+00] marginals: [-0.000e+00 -1.500e+00 -5.000e-01] mip_node_count: 0 mip_dual_bound: 0.0 mip_gap: 0.0 We can use a small function to extract the important information and print in a line as follows. The value of optimal is \\(-18\\) at \\((0,8,1/2,0)\\) 2. Example 1.b \u00b6 We can solve the second assignment \\[\\begin{alignat*}{2} & \\text{minimize: } && 2x-y+2z \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x + y &\\leq 10 \\\\ x+2y-2z &\\leq 20 \\\\ y+2z &\\leq 5 \\\\ x,y,z &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(-5\\) at \\((0,5,0)\\) 3. Example 1.c \u00b6 We can solve the second assignment \\[\\begin{alignat*}{2} & \\text{maximize: } && x_1 + 2x_2 + 2x_3, \\\\ & \\text{subject to: } && \\begin{aligned}[t] 5x_1 + 2x_2 + 3x_3 &\\leq 15 \\\\ x_1 + 4x_2 + 2x_3 &\\leq 12 \\\\ 2x_1 + x_3 &\\leq 8 \\\\ x_1,x_2,x_3 &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(21/2\\) at \\((0,3/4,9/2)\\) 4. Example 2.a \u00b6 We can solve the second assignment \\[\\begin{alignat*}{2} & \\text{maximize: } && 3x_1 - x_2 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x_1 + x_2 &\\geq 2 \\\\ x_1 + 3x_2 &\\leq 2 \\\\ x_2 &\\leq 4 \\\\ x_1,x_2 &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(6\\) at \\((2,0)\\) 5. Example 5.a \u00b6 We can solve the second assignment \\[\\begin{alignat*}{2} & \\text{maximize: } && 2x+4y \\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 2y &\\leq 5 \\\\ x + y &\\leq 4 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(10\\) at \\((0,5/2)\\) 6. Example 4 \u00b6 Consider the following linear programming problem \\[\\begin{alignat*}{2} & \\text{maximize: } && 3x+2y \\\\ & \\text{subject to: } && \\begin{aligned}[t] 4x - y &\\leq 4 \\\\ 4x +3y &\\leq 6 \\\\ 4x + y &\\leq 4 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(17/4\\) at \\((6755399441055743/9007199254740992,4503599627370497/4503599627370496)\\) 7. Example 6.b \u00b6 Show that the following problem has unbounded objective \\[\\begin{alignat*}{2} & \\text{maximize: } && 20x_1 + 5x_2 + x_3 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 3x_1 + 5x_2 - 5x_3 &\\leq 50 \\\\ x_1 + 3x_2 - 4x_3 &\\leq 20 \\\\ x_1 &\\leq 10 \\\\ x_1, x_2, x_3 &\\geq 0 \\end{aligned} \\end{alignat*}\\] 'The problem is unbounded. (HiGHS Status 10: model_status is Unbounded; primal_status is At upper bound)' 8. Example 3.b \u00b6 Consider the following problem, in the phase I, the artificial variable didn't leave but assumes the value \\(0\\) , hence we can remove it and continue with phase II \\[\\begin{alignat*}{2} & \\text{maximize: } && 2x_1 + 2x_2 + 4 x_3 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x_1 + x_2 + x_3 &\\leq 2 \\\\ 3x_1 + 4x_2 + 2x_3 &\\geq 8 \\\\ x_1, x_2, x_3 &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(4\\) at \\((0,2,0)\\)","title":"Scipy"},{"location":"operation-research/scipy/#example","text":"c = [ - 1 , 4 ] A = [[ - 3 , 1 ], [ 1 , 2 ]] b = [ 6 , 4 ] x0_bounds = ( None , None ) x1_bounds = ( - 3 , None ) res = linprog ( c , A_ub = A , b_ub = b , bounds = [ x0_bounds , x1_bounds ], method = 'simplex' ) message : The problem is unbounded . ( HiGHS Status 10 : model_status is Unbounded ; primal_status is At upper bound ) success : False status : 3 fun : None x : None nit : 3 lower : residual : None marginals : None upper : residual : None marginals : None eqlin : residual : None marginals : None ineqlin : residual : None marginals : None","title":"Example"},{"location":"operation-research/scipy/#1-example-1a","text":"Now let's try to solve the following problem from the assignment \\[\\begin{alignat*}{2} & \\text{minimize: } && x_1 - 2x_2 - 4x_3 + 2x_4 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x_1 - 2x_3 &\\leq 4 \\\\ x_2 - x_4 &\\leq 8 \\\\ -2x_1 + x_2 + 8x_3 + x_4 &\\leq 12 \\\\ x_1,x_2,x_3,x_4 &\\geq 0 \\end{aligned} \\end{alignat*}\\] We have to use the following command to solve this problem message: Optimization terminated successfully. (HiGHS Status 7: Optimal) success: True status: 0 fun: -18.0 x: [ 0.000e+00 8.000e+00 5.000e-01 0.000e+00] nit: 4 lower: residual: [ 0.000e+00 8.000e+00 5.000e-01 0.000e+00] marginals: [ 0.000e+00 0.000e+00 0.000e+00 1.000e+00] upper: residual: [ inf inf inf inf] marginals: [ 0.000e+00 0.000e+00 0.000e+00 0.000e+00] eqlin: residual: [] marginals: [] ineqlin: residual: [ 5.000e+00 0.000e+00 0.000e+00] marginals: [-0.000e+00 -1.500e+00 -5.000e-01] mip_node_count: 0 mip_dual_bound: 0.0 mip_gap: 0.0 We can use a small function to extract the important information and print in a line as follows. The value of optimal is \\(-18\\) at \\((0,8,1/2,0)\\)","title":"1. Example 1.a"},{"location":"operation-research/scipy/#2-example-1b","text":"We can solve the second assignment \\[\\begin{alignat*}{2} & \\text{minimize: } && 2x-y+2z \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x + y &\\leq 10 \\\\ x+2y-2z &\\leq 20 \\\\ y+2z &\\leq 5 \\\\ x,y,z &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(-5\\) at \\((0,5,0)\\)","title":"2. Example 1.b"},{"location":"operation-research/scipy/#3-example-1c","text":"We can solve the second assignment \\[\\begin{alignat*}{2} & \\text{maximize: } && x_1 + 2x_2 + 2x_3, \\\\ & \\text{subject to: } && \\begin{aligned}[t] 5x_1 + 2x_2 + 3x_3 &\\leq 15 \\\\ x_1 + 4x_2 + 2x_3 &\\leq 12 \\\\ 2x_1 + x_3 &\\leq 8 \\\\ x_1,x_2,x_3 &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(21/2\\) at \\((0,3/4,9/2)\\)","title":"3. Example 1.c"},{"location":"operation-research/scipy/#4-example-2a","text":"We can solve the second assignment \\[\\begin{alignat*}{2} & \\text{maximize: } && 3x_1 - x_2 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x_1 + x_2 &\\geq 2 \\\\ x_1 + 3x_2 &\\leq 2 \\\\ x_2 &\\leq 4 \\\\ x_1,x_2 &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(6\\) at \\((2,0)\\)","title":"4. Example 2.a"},{"location":"operation-research/scipy/#5-example-5a","text":"We can solve the second assignment \\[\\begin{alignat*}{2} & \\text{maximize: } && 2x+4y \\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 2y &\\leq 5 \\\\ x + y &\\leq 4 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(10\\) at \\((0,5/2)\\)","title":"5. Example 5.a"},{"location":"operation-research/scipy/#6-example-4","text":"Consider the following linear programming problem \\[\\begin{alignat*}{2} & \\text{maximize: } && 3x+2y \\\\ & \\text{subject to: } && \\begin{aligned}[t] 4x - y &\\leq 4 \\\\ 4x +3y &\\leq 6 \\\\ 4x + y &\\leq 4 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(17/4\\) at \\((6755399441055743/9007199254740992,4503599627370497/4503599627370496)\\)","title":"6. Example 4"},{"location":"operation-research/scipy/#7-example-6b","text":"Show that the following problem has unbounded objective \\[\\begin{alignat*}{2} & \\text{maximize: } && 20x_1 + 5x_2 + x_3 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 3x_1 + 5x_2 - 5x_3 &\\leq 50 \\\\ x_1 + 3x_2 - 4x_3 &\\leq 20 \\\\ x_1 &\\leq 10 \\\\ x_1, x_2, x_3 &\\geq 0 \\end{aligned} \\end{alignat*}\\] 'The problem is unbounded. (HiGHS Status 10: model_status is Unbounded; primal_status is At upper bound)'","title":"7. Example 6.b"},{"location":"operation-research/scipy/#8-example-3b","text":"Consider the following problem, in the phase I, the artificial variable didn't leave but assumes the value \\(0\\) , hence we can remove it and continue with phase II \\[\\begin{alignat*}{2} & \\text{maximize: } && 2x_1 + 2x_2 + 4 x_3 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x_1 + x_2 + x_3 &\\leq 2 \\\\ 3x_1 + 4x_2 + 2x_3 &\\geq 8 \\\\ x_1, x_2, x_3 &\\geq 0 \\end{aligned} \\end{alignat*}\\] The value of optimal is \\(4\\) at \\((0,2,0)\\)","title":"8. Example 3.b"},{"location":"operation-research/simplex/","text":"Solve the following optimization problem $$ \\begin{alignat*}{2} & \\text{maximize: } && c^Tx \\ & \\text{subject to: } && \\begin{aligned}[t] Ax &\\leq b\\ x &\\geq 0 \\end{aligned} \\end{alignat*} $$ Concrete Problem \u00b6 \\[ \\begin{alignat*}{2} & \\text{maximize: } && z = 2x + 3y\\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 3y &\\leq 12 \\\\ 3x + 2y &\\leq 12 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} \\] 1. Step I \u00b6 Fromulating the problem and creating the first table for simplex algorithm. Basic \\(x\\) \\(y\\) \\(s_{1}\\) \\(s_{2}\\) Solution Ratio \\(z\\) \\(-2\\) \\(-3\\) \\(0\\) \\(0\\) \\(0\\) \\(s_{1}\\) \\(1\\) \\(3\\) \\(1\\) \\(0\\) \\(12\\) \\(s_{2}\\) \\(3\\) \\(2\\) \\(0\\) \\(1\\) \\(12\\) 2. Step II \u00b6 We have to choose an entering variable which will increase the value of objective. So we choose any variable with negative coefficient. Here we choose \\(y\\) . Basic \\(x\\) \\(y\\) \\(s_{1}\\) \\(s_{2}\\) Solution Ratio \\(z\\) \\(-2\\) \\(-3\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(s_{1}\\) \\(1\\) \\(3\\) \\(1\\) \\(0\\) \\(12\\) \\(4\\) \\(s_{2}\\) \\(3\\) \\(2\\) \\(0\\) \\(1\\) \\(12\\) \\(6\\) 3. Step III \u00b6 We have to choose a leaving variable based on ratio analysis. Here we choose the variable with least positive ratio. In this table \\(s_1\\) has the least positive ratio, so it will leave. Now we have to perform the pivoting step. 4. Step IV \u00b6 After pivoting we get a new table. Where we can repreat the above steps again and again till the simplex algorithm terminate. In ideal case we get no entering varable. Basic \\(x\\) \\(y\\) \\(s_{1}\\) \\(s_{2}\\) Solution Ratio \\(z\\) \\(-1\\) \\(0\\) \\(1\\) \\(0\\) \\(12\\) \\(y\\) \\(\\frac{1}{3}\\) \\(1\\) \\(\\frac{1}{3}\\) \\(0\\) \\(4\\) \\(s_{2}\\) \\(\\frac{7}{3}\\) \\(0\\) \\(- \\frac{2}{3}\\) \\(1\\) \\(4\\) Basic \\(x\\) \\(y\\) \\(s_{1}\\) \\(s_{2}\\) Solution Ratio \\(z\\) \\(-1\\) \\(0\\) \\(1\\) \\(0\\) \\(12\\) \\(-12\\) \\(y\\) \\(\\frac{1}{3}\\) \\(1\\) \\(\\frac{1}{3}\\) \\(0\\) \\(4\\) \\(12\\) \\(s_{2}\\) \\(\\frac{7}{3}\\) \\(0\\) \\(- \\frac{2}{3}\\) \\(1\\) \\(4\\) \\(\\frac{12}{7}\\) Basic \\(x\\) \\(y\\) \\(s_{1}\\) \\(s_{2}\\) Solution Ratio \\(z\\) \\(0\\) \\(0\\) \\(\\frac{5}{7}\\) \\(\\frac{3}{7}\\) \\(\\frac{96}{7}\\) \\(y\\) \\(0\\) \\(1\\) \\(\\frac{3}{7}\\) \\(- \\frac{1}{7}\\) \\(\\frac{24}{7}\\) \\(x\\) \\(1\\) \\(0\\) \\(- \\frac{2}{7}\\) \\(\\frac{3}{7}\\) \\(\\frac{12}{7}\\) Finally we got a table with all non-negaitve coefficient corresponding to \\(z\\) variable. The solution of this problem is \\(96/7\\) at the point \\((12/7, 24/7)\\) 5. Problem 2 \u00b6 Solve the following optimization problem. \\[ \\begin{alignat*}{2} & \\text{maximize: } && z = 2x_1 + x_2 - 3x_3 + 5x_4 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x_1 + 2x_2 + 2x_3 + 4x_4 &\\leq 40 \\\\ 2x_1 - x_2 + x_3 + 2x_4 &\\leq 8 \\\\ 4x_1 - 2x_2 + x_3 - x_4 &\\leq 10 \\\\ x_1, x_2, x_3, x_4 &\\geq 0 \\end{aligned} \\end{alignat*} \\] \\(\\displaystyle \\left[\\begin{matrix}-2 & -1 & 3 & -5 & 0 & 0 & 0 & 0\\\\1 & 2 & 2 & 4 & 1 & 0 & 0 & 40\\\\2 & -1 & 1 & 2 & 0 & 1 & 0 & 8\\\\4 & -2 & 1 & -1 & 0 & 0 & 1 & 10\\end{matrix}\\right]\\) Basic \\(x_{1}\\) \\(x_{2}\\) \\(x_{3}\\) \\(x_{4}\\) \\(s_{1}\\) \\(s_{2}\\) \\(s_{3}\\) Solution Ratio \\(z\\) \\(-2\\) \\(-1\\) \\(3\\) \\(-5\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(s_{1}\\) \\(1\\) \\(2\\) \\(2\\) \\(4\\) \\(1\\) \\(0\\) \\(0\\) \\(40\\) \\(s_{2}\\) \\(2\\) \\(-1\\) \\(1\\) \\(2\\) \\(0\\) \\(1\\) \\(0\\) \\(8\\) \\(s_{3}\\) \\(4\\) \\(-2\\) \\(1\\) \\(-1\\) \\(0\\) \\(0\\) \\(1\\) \\(10\\) Basic \\(x_{1}\\) \\(x_{2}\\) \\(x_{3}\\) \\(x_{4}\\) \\(s_{1}\\) \\(s_{2}\\) \\(s_{3}\\) Solution Ratio \\(z\\) \\(-2\\) \\(-1\\) \\(3\\) \\(-5\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(s_{1}\\) \\(1\\) \\(2\\) \\(2\\) \\(4\\) \\(1\\) \\(0\\) \\(0\\) \\(40\\) \\(10\\) \\(s_{2}\\) \\(2\\) \\(-1\\) \\(1\\) \\(2\\) \\(0\\) \\(1\\) \\(0\\) \\(8\\) \\(4\\) \\(s_{3}\\) \\(4\\) \\(-2\\) \\(1\\) \\(-1\\) \\(0\\) \\(0\\) \\(1\\) \\(10\\) \\(-10\\) Basic \\(x_{1}\\) \\(x_{2}\\) \\(x_{3}\\) \\(x_{4}\\) \\(s_{1}\\) \\(s_{2}\\) \\(s_{3}\\) Solution Ratio \\(z\\) \\(3\\) \\(- \\frac{7}{2}\\) \\(\\frac{11}{2}\\) \\(0\\) \\(0\\) \\(\\frac{5}{2}\\) \\(0\\) \\(20\\) \\(s_{1}\\) \\(-3\\) \\(4\\) \\(0\\) \\(0\\) \\(1\\) \\(-2\\) \\(0\\) \\(24\\) \\(x_{4}\\) \\(1\\) \\(- \\frac{1}{2}\\) \\(\\frac{1}{2}\\) \\(1\\) \\(0\\) \\(\\frac{1}{2}\\) \\(0\\) \\(4\\) \\(s_{3}\\) \\(5\\) \\(- \\frac{5}{2}\\) \\(\\frac{3}{2}\\) \\(0\\) \\(0\\) \\(\\frac{1}{2}\\) \\(1\\) \\(14\\) Basic \\(x_{1}\\) \\(x_{2}\\) \\(x_{3}\\) \\(x_{4}\\) \\(s_{1}\\) \\(s_{2}\\) \\(s_{3}\\) Solution Ratio \\(z\\) \\(3\\) \\(- \\frac{7}{2}\\) \\(\\frac{11}{2}\\) \\(0\\) \\(0\\) \\(\\frac{5}{2}\\) \\(0\\) \\(20\\) \\(- \\frac{40}{7}\\) \\(s_{1}\\) \\(-3\\) \\(4\\) \\(0\\) \\(0\\) \\(1\\) \\(-2\\) \\(0\\) \\(24\\) \\(6\\) \\(x_{4}\\) \\(1\\) \\(- \\frac{1}{2}\\) \\(\\frac{1}{2}\\) \\(1\\) \\(0\\) \\(\\frac{1}{2}\\) \\(0\\) \\(4\\) \\(-8\\) \\(s_{3}\\) \\(5\\) \\(- \\frac{5}{2}\\) \\(\\frac{3}{2}\\) \\(0\\) \\(0\\) \\(\\frac{1}{2}\\) \\(1\\) \\(14\\) \\(- \\frac{28}{5}\\) Basic \\(x_{1}\\) \\(x_{2}\\) \\(x_{3}\\) \\(x_{4}\\) \\(s_{1}\\) \\(s_{2}\\) \\(s_{3}\\) Solution Ratio \\(z\\) \\(\\frac{3}{8}\\) \\(0\\) \\(\\frac{11}{2}\\) \\(0\\) \\(\\frac{7}{8}\\) \\(\\frac{3}{4}\\) \\(0\\) \\(41\\) \\(x_{2}\\) \\(- \\frac{3}{4}\\) \\(1\\) \\(0\\) \\(0\\) \\(\\frac{1}{4}\\) \\(- \\frac{1}{2}\\) \\(0\\) \\(6\\) \\(x_{4}\\) \\(\\frac{5}{8}\\) \\(0\\) \\(\\frac{1}{2}\\) \\(1\\) \\(\\frac{1}{8}\\) \\(\\frac{1}{4}\\) \\(0\\) \\(7\\) \\(s_{3}\\) \\(\\frac{25}{8}\\) \\(0\\) \\(\\frac{3}{2}\\) \\(0\\) \\(\\frac{5}{8}\\) \\(- \\frac{3}{4}\\) \\(1\\) \\(29\\) Since all the coefficient corresponding to \\(z\\) is non-negative, hence there will be no entering variable. The simplex algorithm will terminate. The objective is \\(41\\) at the point \\((0,6,0,7)\\) .","title":"Simplex Algorithm"},{"location":"operation-research/simplex/#concrete-problem","text":"\\[ \\begin{alignat*}{2} & \\text{maximize: } && z = 2x + 3y\\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 3y &\\leq 12 \\\\ 3x + 2y &\\leq 12 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} \\]","title":"Concrete Problem"},{"location":"operation-research/simplex/#1-step-i","text":"Fromulating the problem and creating the first table for simplex algorithm. Basic \\(x\\) \\(y\\) \\(s_{1}\\) \\(s_{2}\\) Solution Ratio \\(z\\) \\(-2\\) \\(-3\\) \\(0\\) \\(0\\) \\(0\\) \\(s_{1}\\) \\(1\\) \\(3\\) \\(1\\) \\(0\\) \\(12\\) \\(s_{2}\\) \\(3\\) \\(2\\) \\(0\\) \\(1\\) \\(12\\)","title":"1. Step I"},{"location":"operation-research/simplex/#2-step-ii","text":"We have to choose an entering variable which will increase the value of objective. So we choose any variable with negative coefficient. Here we choose \\(y\\) . Basic \\(x\\) \\(y\\) \\(s_{1}\\) \\(s_{2}\\) Solution Ratio \\(z\\) \\(-2\\) \\(-3\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(s_{1}\\) \\(1\\) \\(3\\) \\(1\\) \\(0\\) \\(12\\) \\(4\\) \\(s_{2}\\) \\(3\\) \\(2\\) \\(0\\) \\(1\\) \\(12\\) \\(6\\)","title":"2. Step II"},{"location":"operation-research/simplex/#3-step-iii","text":"We have to choose a leaving variable based on ratio analysis. Here we choose the variable with least positive ratio. In this table \\(s_1\\) has the least positive ratio, so it will leave. Now we have to perform the pivoting step.","title":"3. Step III"},{"location":"operation-research/simplex/#4-step-iv","text":"After pivoting we get a new table. Where we can repreat the above steps again and again till the simplex algorithm terminate. In ideal case we get no entering varable. Basic \\(x\\) \\(y\\) \\(s_{1}\\) \\(s_{2}\\) Solution Ratio \\(z\\) \\(-1\\) \\(0\\) \\(1\\) \\(0\\) \\(12\\) \\(y\\) \\(\\frac{1}{3}\\) \\(1\\) \\(\\frac{1}{3}\\) \\(0\\) \\(4\\) \\(s_{2}\\) \\(\\frac{7}{3}\\) \\(0\\) \\(- \\frac{2}{3}\\) \\(1\\) \\(4\\) Basic \\(x\\) \\(y\\) \\(s_{1}\\) \\(s_{2}\\) Solution Ratio \\(z\\) \\(-1\\) \\(0\\) \\(1\\) \\(0\\) \\(12\\) \\(-12\\) \\(y\\) \\(\\frac{1}{3}\\) \\(1\\) \\(\\frac{1}{3}\\) \\(0\\) \\(4\\) \\(12\\) \\(s_{2}\\) \\(\\frac{7}{3}\\) \\(0\\) \\(- \\frac{2}{3}\\) \\(1\\) \\(4\\) \\(\\frac{12}{7}\\) Basic \\(x\\) \\(y\\) \\(s_{1}\\) \\(s_{2}\\) Solution Ratio \\(z\\) \\(0\\) \\(0\\) \\(\\frac{5}{7}\\) \\(\\frac{3}{7}\\) \\(\\frac{96}{7}\\) \\(y\\) \\(0\\) \\(1\\) \\(\\frac{3}{7}\\) \\(- \\frac{1}{7}\\) \\(\\frac{24}{7}\\) \\(x\\) \\(1\\) \\(0\\) \\(- \\frac{2}{7}\\) \\(\\frac{3}{7}\\) \\(\\frac{12}{7}\\) Finally we got a table with all non-negaitve coefficient corresponding to \\(z\\) variable. The solution of this problem is \\(96/7\\) at the point \\((12/7, 24/7)\\)","title":"4. Step IV"},{"location":"operation-research/simplex/#5-problem-2","text":"Solve the following optimization problem. \\[ \\begin{alignat*}{2} & \\text{maximize: } && z = 2x_1 + x_2 - 3x_3 + 5x_4 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x_1 + 2x_2 + 2x_3 + 4x_4 &\\leq 40 \\\\ 2x_1 - x_2 + x_3 + 2x_4 &\\leq 8 \\\\ 4x_1 - 2x_2 + x_3 - x_4 &\\leq 10 \\\\ x_1, x_2, x_3, x_4 &\\geq 0 \\end{aligned} \\end{alignat*} \\] \\(\\displaystyle \\left[\\begin{matrix}-2 & -1 & 3 & -5 & 0 & 0 & 0 & 0\\\\1 & 2 & 2 & 4 & 1 & 0 & 0 & 40\\\\2 & -1 & 1 & 2 & 0 & 1 & 0 & 8\\\\4 & -2 & 1 & -1 & 0 & 0 & 1 & 10\\end{matrix}\\right]\\) Basic \\(x_{1}\\) \\(x_{2}\\) \\(x_{3}\\) \\(x_{4}\\) \\(s_{1}\\) \\(s_{2}\\) \\(s_{3}\\) Solution Ratio \\(z\\) \\(-2\\) \\(-1\\) \\(3\\) \\(-5\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(s_{1}\\) \\(1\\) \\(2\\) \\(2\\) \\(4\\) \\(1\\) \\(0\\) \\(0\\) \\(40\\) \\(s_{2}\\) \\(2\\) \\(-1\\) \\(1\\) \\(2\\) \\(0\\) \\(1\\) \\(0\\) \\(8\\) \\(s_{3}\\) \\(4\\) \\(-2\\) \\(1\\) \\(-1\\) \\(0\\) \\(0\\) \\(1\\) \\(10\\) Basic \\(x_{1}\\) \\(x_{2}\\) \\(x_{3}\\) \\(x_{4}\\) \\(s_{1}\\) \\(s_{2}\\) \\(s_{3}\\) Solution Ratio \\(z\\) \\(-2\\) \\(-1\\) \\(3\\) \\(-5\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(s_{1}\\) \\(1\\) \\(2\\) \\(2\\) \\(4\\) \\(1\\) \\(0\\) \\(0\\) \\(40\\) \\(10\\) \\(s_{2}\\) \\(2\\) \\(-1\\) \\(1\\) \\(2\\) \\(0\\) \\(1\\) \\(0\\) \\(8\\) \\(4\\) \\(s_{3}\\) \\(4\\) \\(-2\\) \\(1\\) \\(-1\\) \\(0\\) \\(0\\) \\(1\\) \\(10\\) \\(-10\\) Basic \\(x_{1}\\) \\(x_{2}\\) \\(x_{3}\\) \\(x_{4}\\) \\(s_{1}\\) \\(s_{2}\\) \\(s_{3}\\) Solution Ratio \\(z\\) \\(3\\) \\(- \\frac{7}{2}\\) \\(\\frac{11}{2}\\) \\(0\\) \\(0\\) \\(\\frac{5}{2}\\) \\(0\\) \\(20\\) \\(s_{1}\\) \\(-3\\) \\(4\\) \\(0\\) \\(0\\) \\(1\\) \\(-2\\) \\(0\\) \\(24\\) \\(x_{4}\\) \\(1\\) \\(- \\frac{1}{2}\\) \\(\\frac{1}{2}\\) \\(1\\) \\(0\\) \\(\\frac{1}{2}\\) \\(0\\) \\(4\\) \\(s_{3}\\) \\(5\\) \\(- \\frac{5}{2}\\) \\(\\frac{3}{2}\\) \\(0\\) \\(0\\) \\(\\frac{1}{2}\\) \\(1\\) \\(14\\) Basic \\(x_{1}\\) \\(x_{2}\\) \\(x_{3}\\) \\(x_{4}\\) \\(s_{1}\\) \\(s_{2}\\) \\(s_{3}\\) Solution Ratio \\(z\\) \\(3\\) \\(- \\frac{7}{2}\\) \\(\\frac{11}{2}\\) \\(0\\) \\(0\\) \\(\\frac{5}{2}\\) \\(0\\) \\(20\\) \\(- \\frac{40}{7}\\) \\(s_{1}\\) \\(-3\\) \\(4\\) \\(0\\) \\(0\\) \\(1\\) \\(-2\\) \\(0\\) \\(24\\) \\(6\\) \\(x_{4}\\) \\(1\\) \\(- \\frac{1}{2}\\) \\(\\frac{1}{2}\\) \\(1\\) \\(0\\) \\(\\frac{1}{2}\\) \\(0\\) \\(4\\) \\(-8\\) \\(s_{3}\\) \\(5\\) \\(- \\frac{5}{2}\\) \\(\\frac{3}{2}\\) \\(0\\) \\(0\\) \\(\\frac{1}{2}\\) \\(1\\) \\(14\\) \\(- \\frac{28}{5}\\) Basic \\(x_{1}\\) \\(x_{2}\\) \\(x_{3}\\) \\(x_{4}\\) \\(s_{1}\\) \\(s_{2}\\) \\(s_{3}\\) Solution Ratio \\(z\\) \\(\\frac{3}{8}\\) \\(0\\) \\(\\frac{11}{2}\\) \\(0\\) \\(\\frac{7}{8}\\) \\(\\frac{3}{4}\\) \\(0\\) \\(41\\) \\(x_{2}\\) \\(- \\frac{3}{4}\\) \\(1\\) \\(0\\) \\(0\\) \\(\\frac{1}{4}\\) \\(- \\frac{1}{2}\\) \\(0\\) \\(6\\) \\(x_{4}\\) \\(\\frac{5}{8}\\) \\(0\\) \\(\\frac{1}{2}\\) \\(1\\) \\(\\frac{1}{8}\\) \\(\\frac{1}{4}\\) \\(0\\) \\(7\\) \\(s_{3}\\) \\(\\frac{25}{8}\\) \\(0\\) \\(\\frac{3}{2}\\) \\(0\\) \\(\\frac{5}{8}\\) \\(- \\frac{3}{4}\\) \\(1\\) \\(29\\) Since all the coefficient corresponding to \\(z\\) is non-negative, hence there will be no entering variable. The simplex algorithm will terminate. The objective is \\(41\\) at the point \\((0,6,0,7)\\) .","title":"5. Problem 2"},{"location":"operation-research/unconstrained-optimization/","text":"Find the maxima of the following function \\[f(x,y)=x^4 \u2212x^2y+y^2 \u22123y+4\\] Step I \u00b6 Defining variable and function. x , y = sp . var ( 'x,y' , real = True ); f = x ** 4 - x ** 2 * y + y ** 2 - 3 * y + 4 f \\(\\displaystyle x^{4} - x^{2} y + y^{2} - 3 y + 4\\) 1. Step II \u00b6 Finding gradiant of the function. gradf = [ sp . diff ( f , c ) for c in [ x , y ]] # gradient of Lagrangian w.r.t. (x,y) \\(\\displaystyle 4 x^{3} - 2 x y\\) \\(\\displaystyle - x^{2} + 2 y - 3\\) 2. Step III \u00b6 Finding the criticlal points by setting the gradient equal to \\(0\\) . Critical points is obtained using stationary_points = sp . solve ( gradf , [ x , y ], dict = True ) # solve the KKT equations stationary_points \\(x\\) \\(y\\) Obj \\(-1\\) \\(2\\) \\(1\\) \\(0\\) \\(\\frac{3}{2}\\) \\(\\frac{7}{4}\\) \\(1\\) \\(2\\) \\(1\\) 3. Step IV \u00b6 Computing the sign of the Hessian at each of the critical points. The Hessian is computed as H = sp . hessian ( f , ( x , y )) H \\(\\displaystyle \\left[\\begin{matrix}12 x^{2} - 2 y & - 2 x\\\\- 2 x & 2\\end{matrix}\\right]\\) The Eigenvalues of Hessina Matrix will determine weather a point is maxima or minima def sign ( A ): d = A . eigenvals () . keys () if any ( x >= 0 for x in d ): if any ( x <= 0 for x in d ): return \"None\" else : return \"Minima\" else : return \"Maxima\" \\(x\\) \\(y\\) Obj Hessian \\(-1\\) \\(2\\) \\(1\\) Minima \\(0\\) \\(\\frac{3}{2}\\) \\(\\frac{7}{4}\\) None \\(1\\) \\(2\\) \\(1\\) Minima Conclusion: The points \\((-1,2)\\) and \\((1,2)\\) are the local minima(which is also global) of the given function.","title":"Unconstrained Optimization"},{"location":"operation-research/unconstrained-optimization/#step-i","text":"Defining variable and function. x , y = sp . var ( 'x,y' , real = True ); f = x ** 4 - x ** 2 * y + y ** 2 - 3 * y + 4 f \\(\\displaystyle x^{4} - x^{2} y + y^{2} - 3 y + 4\\)","title":"Step I"},{"location":"operation-research/unconstrained-optimization/#1-step-ii","text":"Finding gradiant of the function. gradf = [ sp . diff ( f , c ) for c in [ x , y ]] # gradient of Lagrangian w.r.t. (x,y) \\(\\displaystyle 4 x^{3} - 2 x y\\) \\(\\displaystyle - x^{2} + 2 y - 3\\)","title":"1. Step II"},{"location":"operation-research/unconstrained-optimization/#2-step-iii","text":"Finding the criticlal points by setting the gradient equal to \\(0\\) . Critical points is obtained using stationary_points = sp . solve ( gradf , [ x , y ], dict = True ) # solve the KKT equations stationary_points \\(x\\) \\(y\\) Obj \\(-1\\) \\(2\\) \\(1\\) \\(0\\) \\(\\frac{3}{2}\\) \\(\\frac{7}{4}\\) \\(1\\) \\(2\\) \\(1\\)","title":"2. Step III"},{"location":"operation-research/unconstrained-optimization/#3-step-iv","text":"Computing the sign of the Hessian at each of the critical points. The Hessian is computed as H = sp . hessian ( f , ( x , y )) H \\(\\displaystyle \\left[\\begin{matrix}12 x^{2} - 2 y & - 2 x\\\\- 2 x & 2\\end{matrix}\\right]\\) The Eigenvalues of Hessina Matrix will determine weather a point is maxima or minima def sign ( A ): d = A . eigenvals () . keys () if any ( x >= 0 for x in d ): if any ( x <= 0 for x in d ): return \"None\" else : return \"Minima\" else : return \"Maxima\" \\(x\\) \\(y\\) Obj Hessian \\(-1\\) \\(2\\) \\(1\\) Minima \\(0\\) \\(\\frac{3}{2}\\) \\(\\frac{7}{4}\\) None \\(1\\) \\(2\\) \\(1\\) Minima Conclusion: The points \\((-1,2)\\) and \\((1,2)\\) are the local minima(which is also global) of the given function.","title":"3. Step IV"},{"location":"programming-in-c/19-21/","text":"Progress Report \u00b6 S. No. Date Notes 1 2022-12-13 An introduction to C programming. 2 2022-12-19 Structure of C Program. 3 2022-12-20 Variables and Keywords in C programming. 4 2022-12-21 Data types 5 2022-12-26 Simple arithmetic in C 6 2022-12-27 Program to find area of circle and square using scanf 7 2023-01-02 Programs to find area of the rectangle and to find the sum of the digits of a five digit number. 8 2023-01-03 Areaoftriangle.c and Cartesiantopolarcoordinate.c 9 2023-01-04 Programs - trigonometric.c and interchangingthecontentofavar.c","title":"19-21"},{"location":"programming-in-c/19-21/#progress-report","text":"S. No. Date Notes 1 2022-12-13 An introduction to C programming. 2 2022-12-19 Structure of C Program. 3 2022-12-20 Variables and Keywords in C programming. 4 2022-12-21 Data types 5 2022-12-26 Simple arithmetic in C 6 2022-12-27 Program to find area of circle and square using scanf 7 2023-01-02 Programs to find area of the rectangle and to find the sum of the digits of a five digit number. 8 2023-01-03 Areaoftriangle.c and Cartesiantopolarcoordinate.c 9 2023-01-04 Programs - trigonometric.c and interchangingthecontentofavar.c","title":"Progress Report"},{"location":"programming-in-c/feature/","text":"Key Feature of C Programming \u00b6 C is a general-purpose, procedural programming language that was developed in the 1970s by Dennis Ritchie. It is a popular language for system programming, as well as for creating applications that run on a wide variety of platforms, including Windows, Mac, Linux, and Unix. Here are some of the key features of C: C is a compiled language 1 . This means that the code is converted into machine code that can be directly executed by the computer's processor. C is a low-level language 2 . It provides more control over the hardware and allows developers to write code that is closer to the machine's native language. C is a procedural language 3 . It follows a top-down approach, with code organized into functions and blocks of statements that are executed in a specific order. C has a simple and clean syntax. It uses curly braces to enclose blocks of code and semicolons to mark the end of statements. C is case-sensitive. This means that the language treats upper and lowercase letters as distinct characters. C uses the standard C library, which provides a set of functions for performing common tasks such as input/output, memory management, and string manipulation. Overall, C is a powerful and efficient language that is widely used in many different contexts. It is particularly well-suited for system programming, low-level tasks, and performance-critical applications. A compiled language is a programming language that is designed to be transformed into machine code that can be executed by a computer's processor. The process of converting source code written in a compiled language into machine code is called compilation. Compiled languages are typically faster than interpreted languages, which are executed by an interpreter at runtime rather than being compiled in advance. This is because the machine code generated by a compiler is optimized for the specific processor and operating system it is being run on, whereas interpreted code is executed on the fly and may not be as efficient. Some examples of compiled languages include C, C++, and Fortran. These languages are typically used for tasks that require a lot of processing power or that need to be very efficient, such as operating systems, device drivers, and scientific simulations. However, compiled languages can be more difficult to work with than interpreted languages because they require an extra compilation step before the code can be executed. This can make them less flexible and slower to develop, especially for tasks that involve a lot of prototyping and testing. Other type is language is called interpreted language. An interpreted language is a programming language that is designed to be executed by an interpreter at runtime rather than being compiled in advance. Interpreted languages are typically easier to work with than compiled languages because they do not require a separate compilation step before the code can be executed. This makes them more flexible and faster to develop, especially for tasks that involve a lot of prototyping and testing. However, interpreted languages are typically slower than compiled languages because the code is not optimized for a specific processor and operating system. Instead, the interpreter reads and executes the source code line by line at runtime, which can be slower than running pre-compiled machine code. Some examples of interpreted languages include Python, Ruby, and JavaScript. These languages are often used for tasks that do not require a lot of processing power, such as web development, data analysis, and scripting. Overall, whether to use a compiled or interpreted language depends on the specific needs of the task at hand. Compiled languages are generally more efficient and suitable for performance-critical tasks, while interpreted languages are more flexible and easier to work with for tasks that involve a lot of prototyping and testing. \u21a9 In computer science, a low-level language is a programming language that provides little or no abstraction from a computer's instruction set architecture. This means that the code written in a low-level language is very close to the machine code that a computer can execute directly. Low-level languages are typically more difficult to read and write than high-level languages, which are designed to be more abstract and easier for humans to understand. Low-level languages are often used for tasks that require a lot of control over the hardware or that need to be very efficient, such as operating systems, device drivers, and system-level utilities. Examples of low-level languages include assembly language and C. In contrast, high-level languages are designed to be more abstract and easier for humans to read and write. They provide higher levels of abstraction from the underlying hardware and are typically more portable, meaning that code written in a high-level language can be easily adapted to run on different types of computers. Examples of high-level languages include Python, Java, and C++. \u21a9 A procedural language is a type of programming language that follows a top-down approach, with code organized into procedures or functions that are executed in a specific order. These procedures contain a series of steps or statements that are executed sequentially, and may also accept input and return output. Procedural languages are based on the concept of a \"procedure call,\" which is a request to execute a specific procedure or function. Procedures can be called from other procedures or functions, allowing developers to build complex programs by dividing them into smaller, more manageable units. Procedural languages are often contrasted with object-oriented languages, which are based on the concept of \"objects\" that contain both data and methods for manipulating that data. Some examples of procedural languages include C, BASIC, and FORTRAN. These languages are widely used for a variety of tasks, including system programming, scientific simulations, and numerical computing. A non-procedural language is a type of programming language that does not follow a procedural approach to code organization. Instead of dividing code into procedures or functions that are executed in a specific order, non-procedural languages focus on expressing the desired result and leaving the implementation details to the system. One example of a non-procedural language is SQL (Structured Query Language), which is used for accessing and manipulating data stored in relational databases. In SQL, users specify the desired result using declarative statements, and the system determines the most efficient way to execute the request. Other examples of non-procedural languages include functional languages, such as Haskell and Lisp, and logical languages, such as Prolog. These languages are often used for tasks that involve complex data manipulation or symbolic reasoning, and are well-suited for tasks that require a high-level of abstraction. Overall, non-procedural languages can be an effective alternative to procedural languages for certain types of tasks, but may not be as suitable for tasks that require a lot of control over the execution flow or that need to be very efficient. \u21a9","title":"Feature of C"},{"location":"programming-in-c/feature/#key-feature-of-c-programming","text":"C is a general-purpose, procedural programming language that was developed in the 1970s by Dennis Ritchie. It is a popular language for system programming, as well as for creating applications that run on a wide variety of platforms, including Windows, Mac, Linux, and Unix. Here are some of the key features of C: C is a compiled language 1 . This means that the code is converted into machine code that can be directly executed by the computer's processor. C is a low-level language 2 . It provides more control over the hardware and allows developers to write code that is closer to the machine's native language. C is a procedural language 3 . It follows a top-down approach, with code organized into functions and blocks of statements that are executed in a specific order. C has a simple and clean syntax. It uses curly braces to enclose blocks of code and semicolons to mark the end of statements. C is case-sensitive. This means that the language treats upper and lowercase letters as distinct characters. C uses the standard C library, which provides a set of functions for performing common tasks such as input/output, memory management, and string manipulation. Overall, C is a powerful and efficient language that is widely used in many different contexts. It is particularly well-suited for system programming, low-level tasks, and performance-critical applications. A compiled language is a programming language that is designed to be transformed into machine code that can be executed by a computer's processor. The process of converting source code written in a compiled language into machine code is called compilation. Compiled languages are typically faster than interpreted languages, which are executed by an interpreter at runtime rather than being compiled in advance. This is because the machine code generated by a compiler is optimized for the specific processor and operating system it is being run on, whereas interpreted code is executed on the fly and may not be as efficient. Some examples of compiled languages include C, C++, and Fortran. These languages are typically used for tasks that require a lot of processing power or that need to be very efficient, such as operating systems, device drivers, and scientific simulations. However, compiled languages can be more difficult to work with than interpreted languages because they require an extra compilation step before the code can be executed. This can make them less flexible and slower to develop, especially for tasks that involve a lot of prototyping and testing. Other type is language is called interpreted language. An interpreted language is a programming language that is designed to be executed by an interpreter at runtime rather than being compiled in advance. Interpreted languages are typically easier to work with than compiled languages because they do not require a separate compilation step before the code can be executed. This makes them more flexible and faster to develop, especially for tasks that involve a lot of prototyping and testing. However, interpreted languages are typically slower than compiled languages because the code is not optimized for a specific processor and operating system. Instead, the interpreter reads and executes the source code line by line at runtime, which can be slower than running pre-compiled machine code. Some examples of interpreted languages include Python, Ruby, and JavaScript. These languages are often used for tasks that do not require a lot of processing power, such as web development, data analysis, and scripting. Overall, whether to use a compiled or interpreted language depends on the specific needs of the task at hand. Compiled languages are generally more efficient and suitable for performance-critical tasks, while interpreted languages are more flexible and easier to work with for tasks that involve a lot of prototyping and testing. \u21a9 In computer science, a low-level language is a programming language that provides little or no abstraction from a computer's instruction set architecture. This means that the code written in a low-level language is very close to the machine code that a computer can execute directly. Low-level languages are typically more difficult to read and write than high-level languages, which are designed to be more abstract and easier for humans to understand. Low-level languages are often used for tasks that require a lot of control over the hardware or that need to be very efficient, such as operating systems, device drivers, and system-level utilities. Examples of low-level languages include assembly language and C. In contrast, high-level languages are designed to be more abstract and easier for humans to read and write. They provide higher levels of abstraction from the underlying hardware and are typically more portable, meaning that code written in a high-level language can be easily adapted to run on different types of computers. Examples of high-level languages include Python, Java, and C++. \u21a9 A procedural language is a type of programming language that follows a top-down approach, with code organized into procedures or functions that are executed in a specific order. These procedures contain a series of steps or statements that are executed sequentially, and may also accept input and return output. Procedural languages are based on the concept of a \"procedure call,\" which is a request to execute a specific procedure or function. Procedures can be called from other procedures or functions, allowing developers to build complex programs by dividing them into smaller, more manageable units. Procedural languages are often contrasted with object-oriented languages, which are based on the concept of \"objects\" that contain both data and methods for manipulating that data. Some examples of procedural languages include C, BASIC, and FORTRAN. These languages are widely used for a variety of tasks, including system programming, scientific simulations, and numerical computing. A non-procedural language is a type of programming language that does not follow a procedural approach to code organization. Instead of dividing code into procedures or functions that are executed in a specific order, non-procedural languages focus on expressing the desired result and leaving the implementation details to the system. One example of a non-procedural language is SQL (Structured Query Language), which is used for accessing and manipulating data stored in relational databases. In SQL, users specify the desired result using declarative statements, and the system determines the most efficient way to execute the request. Other examples of non-procedural languages include functional languages, such as Haskell and Lisp, and logical languages, such as Prolog. These languages are often used for tasks that involve complex data manipulation or symbolic reasoning, and are well-suited for tasks that require a high-level of abstraction. Overall, non-procedural languages can be an effective alternative to procedural languages for certain types of tasks, but may not be as suitable for tasks that require a lot of control over the execution flow or that need to be very efficient. \u21a9","title":"Key Feature of C Programming"},{"location":"programming-in-c/introduction/","text":"Welcome \u00b6 Thank you! I'm glad to be a part of your basic C programming course. C is a powerful and efficient language that is widely used in many different contexts. It is a great choice for beginners because it is relatively easy to learn and provides a solid foundation for further study in computer science and software development. In this course, you will learn the basics of C programming, including its syntax, data types, variables, control structures, and functions. You will also learn how to use the standard C library and how to debug and troubleshoot your code. As you progress through the course, you will have the opportunity to practice what you have learned through hands-on exercises and projects. This will help you develop important skills such as problem-solving, critical thinking, and logical reasoning, which are essential for success in programming. I'm looking forward to helping you learn C and achieve your goals in this course. If you have any questions or need assistance, please don't hesitate to ask. * Run the following program to print Hello World! \u00b6 2. Objective of this Course \u00b6 We will cover basic technique in programming which will be useful in any programming language. Introduction to programming and the C language History and evolution of programming languages Basics of computer hardware and software Overview of the C language, including its syntax and conventions Data types and variables Primitive data types (integer, floating point, character, etc.) Declaring and initializing variables Type casting and type conversion Input and output Reading and writing data using printf and scanf Formatted output with specifiers Control structures Conditional statements ( if , if-else ) Loops ( for , while ) Functions Defining and calling functions Function prototypes and declarations Arrays Declaring and initializing arrays Using loops to process array elements 3. Refrence \u00b6 Let Us C by Yashavant Kanetkar 4. Instructor \u00b6 Sandeep Suman , Assistant Professor, TMBU, Bhagalpur","title":"Course Overview"},{"location":"programming-in-c/introduction/#welcome","text":"Thank you! I'm glad to be a part of your basic C programming course. C is a powerful and efficient language that is widely used in many different contexts. It is a great choice for beginners because it is relatively easy to learn and provides a solid foundation for further study in computer science and software development. In this course, you will learn the basics of C programming, including its syntax, data types, variables, control structures, and functions. You will also learn how to use the standard C library and how to debug and troubleshoot your code. As you progress through the course, you will have the opportunity to practice what you have learned through hands-on exercises and projects. This will help you develop important skills such as problem-solving, critical thinking, and logical reasoning, which are essential for success in programming. I'm looking forward to helping you learn C and achieve your goals in this course. If you have any questions or need assistance, please don't hesitate to ask.","title":"Welcome"},{"location":"programming-in-c/introduction/#run-the-following-program-to-print-hello-world","text":"","title":"* Run the following program to print Hello World!"},{"location":"programming-in-c/introduction/#2-objective-of-this-course","text":"We will cover basic technique in programming which will be useful in any programming language. Introduction to programming and the C language History and evolution of programming languages Basics of computer hardware and software Overview of the C language, including its syntax and conventions Data types and variables Primitive data types (integer, floating point, character, etc.) Declaring and initializing variables Type casting and type conversion Input and output Reading and writing data using printf and scanf Formatted output with specifiers Control structures Conditional statements ( if , if-else ) Loops ( for , while ) Functions Defining and calling functions Function prototypes and declarations Arrays Declaring and initializing arrays Using loops to process array elements","title":"2. Objective of this Course"},{"location":"programming-in-c/introduction/#3-refrence","text":"Let Us C by Yashavant Kanetkar","title":"3. Refrence"},{"location":"programming-in-c/introduction/#4-instructor","text":"Sandeep Suman , Assistant Professor, TMBU, Bhagalpur","title":"4. Instructor"},{"location":"programming-in-c/programming/","text":"What is Computer Programming? \u00b6 Programming is the process of designing and implementing computer software. It involves writing code in a programming language, testing that code to ensure it functions as intended, and making any necessary revisions until the software is complete. Programming is important because it allows people to create custom software solutions to solve specific problems or automate tasks. It is used in a wide range of industries, including business, science, engineering, and entertainment, and is a critical skill in the modern world. In addition to its practical applications, programming is also a form of problem-solving and creativity. It requires the ability to think logically and to break complex tasks down into smaller, more manageable steps. It also allows people to express their ideas and creativity through the design and functionality of their software. Overall, programming is a valuable skill that can be applied in many different contexts and has the potential to make a significant impact in the world. 1. Why we Use C Programming? \u00b6 C is a popular programming language because it is powerful, efficient, and flexible. It is a general-purpose language, which means it can be used to build almost any type of software, from operating systems to graphical user interface (GUI) applications to mobile apps. One of the main reasons for C's popularity is its efficiency. C is a compiled language, which means that the code is converted into machine code that can be directly executed by the computer's processor. This makes C programs fast and efficient, particularly for tasks that require a lot of processing power, such as mathematical calculations and data manipulation. C is also a low-level language, which means it provides more control over the hardware and allows developers to write code that is closer to the machine's native language. This can be useful for tasks that need to interact directly with the hardware, such as drivers and system programs. In addition to its efficiency and low-level control, C is also highly portable. C code can be compiled on one platform and run on another, making it easy to develop software that can be used on a wide range of devices and systems. Overall, C is a versatile and powerful programming language that is widely used in many different contexts. It is particularly well-suited for system programming, low-level tasks, and performance-critical applications. 2. Why we should learn C programming? \u00b6 C programming is often taught as part of a introductory programming courses in schools and universities. It is a foundational language that is designed to teach the basics of computer programming and how to write efficient, well-structured code. Learning C can help students develop important skills such as problem-solving, critical thinking, and logical reasoning. It can also introduce them to concepts that are essential for understanding how computers work, such as data types, variables, loops, and functions. In addition to its educational value, C is also a practical language that is used in many real-world applications. It is the basis for many other programming languages, so learning C can serve as a stepping stone to learning other languages as well. Overall, C programming can be a valuable and rewarding experience for students who are interested in computer science and software development. It provides a strong foundation for further study and can lead to a wide range of career opportunities in the tech industry.","title":"Programming"},{"location":"programming-in-c/programming/#what-is-computer-programming","text":"Programming is the process of designing and implementing computer software. It involves writing code in a programming language, testing that code to ensure it functions as intended, and making any necessary revisions until the software is complete. Programming is important because it allows people to create custom software solutions to solve specific problems or automate tasks. It is used in a wide range of industries, including business, science, engineering, and entertainment, and is a critical skill in the modern world. In addition to its practical applications, programming is also a form of problem-solving and creativity. It requires the ability to think logically and to break complex tasks down into smaller, more manageable steps. It also allows people to express their ideas and creativity through the design and functionality of their software. Overall, programming is a valuable skill that can be applied in many different contexts and has the potential to make a significant impact in the world.","title":"What is Computer Programming?"},{"location":"programming-in-c/programming/#1-why-we-use-c-programming","text":"C is a popular programming language because it is powerful, efficient, and flexible. It is a general-purpose language, which means it can be used to build almost any type of software, from operating systems to graphical user interface (GUI) applications to mobile apps. One of the main reasons for C's popularity is its efficiency. C is a compiled language, which means that the code is converted into machine code that can be directly executed by the computer's processor. This makes C programs fast and efficient, particularly for tasks that require a lot of processing power, such as mathematical calculations and data manipulation. C is also a low-level language, which means it provides more control over the hardware and allows developers to write code that is closer to the machine's native language. This can be useful for tasks that need to interact directly with the hardware, such as drivers and system programs. In addition to its efficiency and low-level control, C is also highly portable. C code can be compiled on one platform and run on another, making it easy to develop software that can be used on a wide range of devices and systems. Overall, C is a versatile and powerful programming language that is widely used in many different contexts. It is particularly well-suited for system programming, low-level tasks, and performance-critical applications.","title":"1. Why we Use C Programming?"},{"location":"programming-in-c/programming/#2-why-we-should-learn-c-programming","text":"C programming is often taught as part of a introductory programming courses in schools and universities. It is a foundational language that is designed to teach the basics of computer programming and how to write efficient, well-structured code. Learning C can help students develop important skills such as problem-solving, critical thinking, and logical reasoning. It can also introduce them to concepts that are essential for understanding how computers work, such as data types, variables, loops, and functions. In addition to its educational value, C is also a practical language that is used in many real-world applications. It is the basis for many other programming languages, so learning C can serve as a stepping stone to learning other languages as well. Overall, C programming can be a valuable and rewarding experience for students who are interested in computer science and software development. It provides a strong foundation for further study and can lead to a wide range of career opportunities in the tech industry.","title":"2. Why we should learn C programming?"}]}